{"version":3,"file":"component---src-templates-state-competition-state-competition-tsx-4203cb6a79dcea8d9ab0.js","mappings":"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","sources":["webpack://sod/./src/components/details/competition/competition-details.tsx","webpack://sod/./src/templates/state-competition/state-competition.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport BaseComponent from '../../../base/base-component';\nimport DetailsContainer from '../container/details-container';\nimport DetailsItem from '../item/details-item';\nimport { IDetailsItem } from '../item/details-item-interface';\nimport { ICompetitionDetailsProperties } from './competition-details-interface';\n\nexport default class CompetitionDetails extends BaseComponent<ICompetitionDetailsProperties> {\n  protected declareTranslateCollection(): string {\n    return 'competitionDetails';\n  }\n\n  public render(): ReactNode {\n    const { overall, items } = this.props;\n\n    return (\n      <DetailsContainer>\n        <h3 className=\"c-score__title\">{this.translate('overallTitle')}</h3>\n        <DetailsItem item={overall} />\n        <h3 className=\"c-score__title\">{this.translate('componentTitle')}</h3>\n        {items.map((item: IDetailsItem, index: number): ReactNode => {\n          return <DetailsItem key={index} item={item} />;\n        })}\n      </DetailsContainer>\n    );\n  }\n}\n","import { graphql } from 'gatsby';\nimport React, { ReactNode } from 'react';\nimport { generateUrlForStates } from '../../../utils';\nimport BaseComponent from '../../base/base-component';\nimport { ICyclePercentChartPoint } from '../../components/charts/cycle-percent/cycle-percent-interface';\nimport { ICycleScoreChartPoint } from '../../components/charts/cycle-score/cycle-score-interface';\nimport ContainerBox from '../../components/container-box/container-box';\nimport CriteriaGrade from '../../components/criteria-grade/criteria-grade';\nimport CompetitionDetails from '../../components/details/competition/competition-details';\nimport ImproveBox from '../../components/improve-box/improve-box';\nimport Share from '../../components/share/share';\nimport SocialMetadata from '../../components/social-metadata/social-metadata';\nimport { SocialMetadataType } from '../../components/social-metadata/social-metadata-enum';\nimport StateLayout from '../../components/state-layout/state-layout';\nimport SimilarStates from '../../components/states/similar-states/similar-states';\nimport {\n  SODComponents,\n  SODCycles,\n  SODGrade,\n  SODMeasures,\n} from '../../global/global-enum';\nimport { ISODNode } from '../../global/global-interfaces';\nimport { IStateCompetitionTemplateProperties } from './state-competition-interface';\n\nexport default class StateCompetitionTemplate extends BaseComponent<IStateCompetitionTemplateProperties> {\n  protected declareTranslateCollection(): string | undefined {\n    return 'stateCompetitionTemplate';\n  }\n\n  public render(): ReactNode {\n    const { data, pageContext } = this.props;\n    const {\n      competitionMarginOfVictory,\n      competitionTotal,\n      competitionUnCompetitive,\n      competitionUnContested,\n      competitionWinnersShare,\n      lesserScoreSimilarStates,\n      greaterScoreSimilarStates,\n      icon,\n    } = data;\n\n    const { breadCrumbs, pageContent } = pageContext;\n    const {\n      competitionScoreDesc1,\n      competitionScoreDesc2,\n      improveCompetitionDesc,\n      improveCompetitionSolution1,\n      improveCompetitionSolution2,\n      improveCompetitionSolution3,\n      hvdScoreDesc,\n      winnersShareDesc,\n      marginVictoryDesc,\n      unContestedDesc,\n      unCompetitiveDesc,\n    } = pageContent;\n    const competitionAverage = this.populateAverageData(SODComponents.TOTAL);\n    const marginAverage = this.populateAverageData(\n      SODComponents.COMPETITION_MARGIN_OF_VICTORY\n    );\n    const unCompetitiveAverage = this.populateAverageData(\n      SODComponents.COMPETITION_UNCOMPETITIVE_SEATS\n    );\n    const unContestedAverage = this.populateAverageData(\n      SODComponents.COMPETITION_UNCONTESTED_RACES\n    );\n    const winnersAverage = this.populateAverageData(\n      SODComponents.COMPETITION_WINNERS_SHARE\n    );\n\n    const competitionOverall = this.populateOverallData(SODComponents.TOTAL);\n    const marginOverall = this.populateOverallData(\n      SODComponents.COMPETITION_MARGIN_OF_VICTORY\n    );\n    const unCompetitiveOverall = this.populateOverallData(\n      SODComponents.COMPETITION_UNCOMPETITIVE_SEATS\n    );\n    const unContestedOverall = this.populateOverallData(\n      SODComponents.COMPETITION_UNCONTESTED_RACES\n    );\n    const winnersOverall = this.populateOverallData(\n      SODComponents.COMPETITION_WINNERS_SHARE\n    );\n\n    const totalCycleScores: ICycleScoreChartPoint[] =\n      competitionTotal.nodes.map((node) => {\n        const { cycle, score, grade, weight } = node;\n        return {\n          cycle,\n          score: Math.round(score * 100),\n          grade,\n          weight,\n        };\n      });\n\n    const hvdCyclePercents: ICyclePercentChartPoint[] =\n      competitionTotal.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.value * 100),\n        };\n      });\n\n    const winnersCyclePercents: ICyclePercentChartPoint[] =\n      competitionWinnersShare.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.value * 100),\n        };\n      });\n\n    const marginCyclePercents: ICyclePercentChartPoint[] =\n      competitionMarginOfVictory.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.value * 100),\n        };\n      });\n\n    const unContestedCyclePercents: ICyclePercentChartPoint[] =\n      competitionUnContested.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.value * 100),\n        };\n      });\n\n    const unCompetitiveCyclePercents: ICyclePercentChartPoint[] =\n      competitionUnCompetitive.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.value * 100),\n        };\n      });\n\n    const lesserScoreSimilarStatesItems = lesserScoreSimilarStates.nodes.map(\n      (node) => {\n        return {\n          abbreviation: node.code,\n          score: Math.round(node.score * 100),\n          title: node.state,\n          grade: node.grade,\n        };\n      }\n    );\n\n    const greaterScoreSimilarStatesItems = greaterScoreSimilarStates.nodes.map(\n      (node) => {\n        return {\n          abbreviation: node.code,\n          score: Math.round(node.score * 100),\n          title: node.state,\n          grade: node.grade,\n        };\n      }\n    );\n\n    const stateUrl: string = generateUrlForStates(competitionOverall.state);\n    const { publicURL: iconUrl = '' } = icon.nodes[0];\n\n    return (\n      <StateLayout\n        title={`${this.translate('title')}(${competitionOverall.state})`}\n        state={competitionOverall.state}\n        image={iconUrl}\n        breadCrumbItems={breadCrumbs}\n      >\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={`${competitionOverall.state} Competition`}\n          description={this.translate('firstScoreDescription')}\n          imageResourceFileName={`embedded-competition-score-${generateUrlForStates(\n            competitionOverall.state\n          )}.png`}\n        />\n        <ContainerBox\n          className=\"c-section--score is-criteria-grade\"\n          id=\"competition\"\n        >\n          <div className=\"c-score\">\n            <CriteriaGrade\n              title={this.translate('scoreTitle')}\n              averageScore={Math.round(competitionAverage.score * 100)}\n              averagePercent={Math.round(competitionAverage.value * 100)}\n              overallPercentage={Math.round(competitionOverall.value * 100)}\n              cycleScores={totalCycleScores}\n              overallGrade={competitionOverall.grade}\n              overallScore={Math.round(competitionOverall.score * 100)}\n              descriptions={[competitionScoreDesc1, competitionScoreDesc2]}\n            />\n            <Share\n              absoluteLink={`/state/${stateUrl}/competition`}\n              embeddedLink={`/embedded/competition/${stateUrl}`}\n              imageResourceFileName={`embedded-competition-score-${generateUrlForStates(\n                competitionOverall.state\n              )}.png`}\n            />\n          </div>\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--similar\">\n          <SimilarStates\n            lesserScoreStates={lesserScoreSimilarStatesItems}\n            greaterScoreStates={greaterScoreSimilarStatesItems}\n            activeState={{\n              abbreviation: competitionOverall.code,\n              grade: competitionOverall.grade,\n              score: Math.round(competitionOverall.score * 100),\n              title: competitionOverall.state,\n            }}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--improve\">\n          <ImproveBox\n            improveBoxItems={{\n              title: this.translate('improveCompetition'),\n              description: improveCompetitionDesc,\n              items: [\n                improveCompetitionSolution1,\n                improveCompetitionSolution2,\n                improveCompetitionSolution3,\n              ],\n            }}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--details\">\n          <CompetitionDetails\n            overall={{\n              title: this.translate('hvdScore'),\n              description: hvdScoreDesc,\n              value: Math.round(competitionOverall.value * 100),\n              averageValue: Math.round(competitionAverage.value * 100),\n              chartData: hvdCyclePercents,\n            }}\n            items={[\n              {\n                title: this.translate('winnersShare'),\n                description: winnersShareDesc,\n                value: Math.round(winnersOverall.value * 100),\n                averageValue: Math.round(winnersAverage.value * 100),\n                chartData: winnersCyclePercents,\n              },\n              {\n                title: this.translate('marginVictory'),\n                description: marginVictoryDesc,\n                value: Math.round(marginOverall.value * 100),\n                averageValue: Math.round(marginAverage.value * 100),\n                chartData: marginCyclePercents,\n              },\n              {\n                title: this.translate('unContested'),\n                description: unContestedDesc,\n                value: Math.round(unContestedOverall.value * 100),\n                averageValue: Math.round(unContestedAverage.value * 100),\n                chartData: unContestedCyclePercents,\n              },\n              {\n                title: this.translate('unCompetitive'),\n                description: unCompetitiveDesc,\n                value: Math.round(unCompetitiveOverall.value * 100),\n                averageValue: Math.round(unCompetitiveAverage.value * 100),\n                chartData: unCompetitiveCyclePercents,\n              },\n            ]}\n          />\n        </ContainerBox>\n      </StateLayout>\n    );\n  }\n\n  private populateOverallData(component: SODComponents): ISODNode {\n    const { overall } = this.props.data;\n    const componentOverall: ISODNode = overall.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n\n    return componentOverall;\n  }\n\n  private populateAverageData(component: SODComponents): ISODNode {\n    const { average } = this.props.data;\n    const componentAverage: ISODNode = average.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n\n    return componentAverage;\n  }\n}\n\nexport const query = graphql`\n  query StateCompetition($state: String, $score: Float) {\n    competitionTotal: allSheetDataCompetition(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Total\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n\n    competitionWinnersShare: allSheetDataCompetition(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Winner's Share\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n\n    competitionMarginOfVictory: allSheetDataCompetition(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Margin of Victory\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n    competitionUnContested: allSheetDataCompetition(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Uncontested Races\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n    competitionUnCompetitive: allSheetDataCompetition(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Uncompetetive Seats\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n    lesserScoreSimilarStates: allSheetDataCompetition(\n      sort: { fields: score, order: DESC }\n      filter: {\n        state: { ne: $state }\n        component: { eq: \"Total\" }\n        cycle: { eq: \"Overall\" }\n        score: { lte: $score }\n      }\n      limit: 3\n    ) {\n      nodes {\n        code\n        score\n        state\n        grade\n      }\n    }\n\n    greaterScoreSimilarStates: allSheetDataCompetition(\n      sort: { fields: score, order: ASC }\n      filter: {\n        state: { ne: $state }\n        component: { eq: \"Total\" }\n        cycle: { eq: \"Overall\" }\n        score: { gte: $score }\n      }\n      limit: 3\n    ) {\n      nodes {\n        code\n        score\n        state\n        grade\n      }\n    }\n\n    average: allSheetDataCompetition(\n      filter: { state: { eq: \"US Average\" }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    overall: allSheetDataCompetition(\n      filter: { state: { eq: $state }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    icon: allFile(\n      filter: {\n        name: { eq: $state }\n        ext: { eq: \".svg\" }\n        relativeDirectory: { eq: \"images/states\" }\n      }\n    ) {\n      nodes {\n        name\n        publicURL\n        relativeDirectory\n      }\n    }\n  }\n`;\n"],"names":["CompetitionDetails","declareTranslateCollection","render","this","props","overall","items","className","translate","item","map","index","key","BaseComponent","StateCompetitionTemplate","data","pageContext","competitionMarginOfVictory","competitionTotal","competitionUnCompetitive","competitionUnContested","competitionWinnersShare","lesserScoreSimilarStates","greaterScoreSimilarStates","icon","breadCrumbs","pageContent","competitionScoreDesc1","competitionScoreDesc2","improveCompetitionDesc","improveCompetitionSolution1","improveCompetitionSolution2","improveCompetitionSolution3","hvdScoreDesc","winnersShareDesc","marginVictoryDesc","unContestedDesc","unCompetitiveDesc","competitionAverage","populateAverageData","SODComponents","marginAverage","unCompetitiveAverage","unContestedAverage","winnersAverage","competitionOverall","populateOverallData","marginOverall","unCompetitiveOverall","unContestedOverall","winnersOverall","totalCycleScores","nodes","node","cycle","score","grade","weight","Math","round","hvdCyclePercents","percent","value","winnersCyclePercents","marginCyclePercents","unContestedCyclePercents","unCompetitiveCyclePercents","lesserScoreSimilarStatesItems","abbreviation","code","title","state","greaterScoreSimilarStatesItems","stateUrl","generateUrlForStates","publicURL","iconUrl","image","breadCrumbItems","type","SocialMetadataType","description","imageResourceFileName","id","averageScore","averagePercent","overallPercentage","cycleScores","overallGrade","overallScore","descriptions","absoluteLink","embeddedLink","lesserScoreStates","greaterScoreStates","activeState","improveBoxItems","averageValue","chartData","component","find","SODCycles","SODGrade","measure","SODMeasures","average"],"sourceRoot":""}