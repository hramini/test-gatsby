{"version":3,"file":"component---src-templates-embedded-competition-state-score-competition-state-score-tsx-db25de4f1655f58409d1.js","mappings":"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","sources":["webpack://sod/./src/components/criteria-grade/criteria-grade.tsx","webpack://sod/./src/components/percent-box/percent-box.tsx","webpack://sod/./src/components/share-container/share-container.tsx","webpack://sod/./src/templates/embedded/competition-state-score/competition-state-score.tsx"],"sourcesContent":["import React, { Fragment, ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport CycleScoreChart from '../charts/cycle-score/cycle-score';\nimport { ICycleScoreChartPoint } from '../charts/cycle-score/cycle-score-interface';\nimport Grade from '../grade/grade';\nimport { GradeSize } from '../grade/grade-enum';\nimport PercentBox from '../percent-box/percent-box';\nimport { ICriteriaGradeProperties } from './criteria-grade-interface';\nimport './criteria-grade.scss';\n\nexport default class CriteriaGrade extends BaseComponent<ICriteriaGradeProperties> {\n  protected declareTranslateCollection(): string | undefined {\n    return 'criteriaGrade';\n  }\n\n  public render(): ReactNode {\n    const {\n      descriptions,\n      averageScore,\n      averagePercent,\n      cycleScores,\n      overallGrade,\n      overallPercentage,\n      overallScore,\n      title,\n      isDecimal,\n      simpleMode = false,\n    } = this.props;\n    const rowClassName: string = [\n      'row c-criteria-grade__container',\n      simpleMode ? 'is-simple' : '',\n    ].join(' ');\n    const chartScores: ICycleScoreChartPoint[] = cycleScores.map(\n      (item): ICycleScoreChartPoint => {\n        return {\n          cycle: item.cycle,\n          score: item.score,\n          weight: item.weight,\n        };\n      }\n    );\n\n    return (\n      <div className=\"c-criteria-grade\">\n        <h3 className=\"c-score__title\">{title}</h3>\n        <div className={rowClassName}>\n          <div className=\"col-md-4 c-criteria-grade__col\">\n            <div className=\"c-criteria-grade__wrap\">\n              <Grade grade={overallGrade} size={GradeSize.LARGE} />\n              <div className=\"c-criteria__info\">\n                <span className=\"c-criteria-grade__overall\">\n                  {overallScore}\n                </span>\n                <span className=\"c-criteria-grade__average\">\n                  {`${this.translate('avg')}:${averageScore}`}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-7 offset-md-1 c-criteria-grade__col\">\n            <div data-name=\"chart\" className=\"c-criteria-grade__chart\">\n              <CycleScoreChart\n                overallGrade={overallGrade}\n                chartPoints={chartScores}\n              />\n            </div>\n          </div>\n        </div>\n        {!simpleMode && (\n          <div className=\"row c-criteria-grade__container c-criteria--raw\">\n            <div className=\"col-md-4 c-criteria-grade__col\">\n              <div className=\"c-criteria-grade__wrap\">\n                <PercentBox\n                  boxValue={overallPercentage}\n                  isDecimal={isDecimal}\n                />\n                <div className=\"c-criteria__info\">\n                  <span className=\"c-criteria-grade__overall\">\n                    {this.translate('rawScore')}\n                  </span>\n                  <span className=\"c-criteria-grade__average\">\n                    {`${this.translate('avg')}:${averagePercent}${\n                      isDecimal ? ' ' : ' %'\n                    }`}\n                  </span>\n                </div>\n              </div>\n            </div>\n            {descriptions && descriptions.length > 0 ? (\n              <div className=\"col-md-7 offset-md-1 c-criteria-grade__col\">\n                {descriptions.map((desc, index) => {\n                  return (\n                    <Fragment key={index}>\n                      <p className=\"c-criteria-grade__desc\">{desc}</p>\n                      <br />\n                    </Fragment>\n                  );\n                })}\n              </div>\n            ) : (\n              <></>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport { IPercentBoxProperties } from './percent-box-interface';\nimport './percent-box.scss';\n\nexport default class PercentBox extends BaseComponent<IPercentBoxProperties> {\n  public render(): ReactNode {\n    const { boxValue, isDecimal = false } = this.props;\n\n    return (\n      <div className=\"c-percent-box\">\n        <div className=\"c-percent-box__percent\">\n          {`${boxValue}${isDecimal ? \" \" : \"%\"}`}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport { IShareContainerProperties } from './share-container-interface';\n\nexport default class ShareContainer extends BaseComponent<IShareContainerProperties> {\n  public render(): ReactNode {\n    const { children, shareName, ...restProperties } = this.props;\n\n    return (\n      <div\n        data-id=\"share\"\n        data-name={shareName}\n        {...restProperties}\n        style={{\n          pointerEvents: 'none',\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n","import { graphql, Link } from 'gatsby';\nimport React, { Fragment, ReactNode } from 'react';\nimport { generateUrlForStates } from '../../../../utils';\nimport BaseComponent from '../../../base/base-component';\nimport { ICycleScoreChartPoint } from '../../../components/charts/cycle-score/cycle-score-interface';\nimport ContainerBox from '../../../components/container-box/container-box';\nimport CriteriaGrade from '../../../components/criteria-grade/criteria-grade';\nimport ShareContainer from '../../../components/share-container/share-container';\nimport SocialMetadata from '../../../components/social-metadata/social-metadata';\nimport { SocialMetadataType } from '../../../components/social-metadata/social-metadata-enum';\nimport SvgIcon from '../../../components/svg-icon/svg-icon';\nimport { SvgIconPathCommand } from '../../../components/svg-icon/svg-icon-enum';\nimport {\n  SODComponents,\n  SODCycles,\n  SODGrade,\n  SODMeasures,\n} from '../../../global/global-enum';\nimport { ISODNode } from '../../../global/global-interfaces';\nimport { Route } from '../../../global/route-enum';\nimport { IEmbeddedCompetitionStateScore } from './competition-state-score-interface';\n\nexport default class EmbeddedPCompetitionStateScore extends BaseComponent<IEmbeddedCompetitionStateScore> {\n  protected declareTranslateCollection(): string | undefined {\n    return 'stateCompetitionTemplate';\n  }\n\n  public render(): ReactNode {\n    const { competitionTotal } = this.props.data;\n\n    const { value: averageValue } = this.populateAverageData(\n      SODComponents.TOTAL\n    );\n    const {\n      state,\n      value: overallValue,\n      score,\n      grade,\n    } = this.populateOverallData(SODComponents.TOTAL);\n    const totalCycleScores: ICycleScoreChartPoint[] =\n      competitionTotal.nodes.map((node) => {\n        const { cycle, score, weight } = node;\n        return {\n          cycle,\n          score: Math.round(score * 100),\n          weight,\n        };\n      });\n\n    return (\n      <Fragment>\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={`${state} ${this.translate('scoreTitle')}`}\n          description={this.translate('firstScoreDescription')}\n          imageResourceFileName={`embedded-competition-score-${generateUrlForStates(\n            state\n          )}.png`}\n        />\n        <ContainerBox className=\"c-section--embed\">\n          <ShareContainer\n            className=\"c-embed__wrap\"\n            shareName={`competition-score-${generateUrlForStates(state)}`}\n          >\n            <div className=\"c-embed__box\">\n              <div className=\"c-embed__state\">{state}</div>\n              <CriteriaGrade\n                title={this.translate('scoreTitle')}\n                averageScore={Math.round(averageValue * 100)}\n                averagePercent={Math.round(averageValue * 100)}\n                overallPercentage={Math.round(overallValue * 100)}\n                cycleScores={totalCycleScores}\n                overallGrade={grade}\n                overallScore={Math.round(score * 100)}\n              />\n            </div>\n            <div className=\"c-embed__logo\">\n              <Link to={Route.HOME}>\n                <SvgIcon\n                  width=\"111\"\n                  viewBox=\"0 0 208 44\"\n                  paths={[\n                    {\n                      command: SvgIconPathCommand.STATE_OF_DEMOCRACY,\n                      fill: '#0D0C0D',\n                    },\n                    {\n                      fillRule: 'evenodd',\n                      clipRule: 'evenodd',\n                      command: SvgIconPathCommand.LOGO_EAST,\n                      fill: '#C7AFF0',\n                    },\n                    {\n                      fillRule: 'evenodd',\n                      clipRule: 'evenodd',\n                      command: SvgIconPathCommand.LOGO_WEST,\n                      fill: '#4A1D96',\n                    },\n                  ]}\n                />\n              </Link>\n            </div>\n          </ShareContainer>\n        </ContainerBox>\n      </Fragment>\n    );\n  }\n\n  private populateOverallData(component: SODComponents): ISODNode {\n    const { overall } = this.props.data;\n    const componentOverall: ISODNode = overall.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n\n    return componentOverall;\n  }\n\n  private populateAverageData(component: SODComponents): ISODNode {\n    const { average } = this.props.data;\n    const componentAverage: ISODNode = average.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n    return componentAverage;\n  }\n}\n\nexport const query = graphql`\n  query EmbeddedStateCompetition($state: String) {\n    competitionTotal: allSheetDataCompetition(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Total\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n\n    average: allSheetDataCompetition(\n      filter: { state: { eq: \"US Average\" }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    overall: allSheetDataCompetition(\n      filter: { state: { eq: $state }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n  }\n`;\n"],"names":["CriteriaGrade","declareTranslateCollection","render","this","props","descriptions","averageScore","averagePercent","cycleScores","overallGrade","overallPercentage","overallScore","title","isDecimal","simpleMode","rowClassName","join","chartScores","map","item","cycle","score","weight","className","grade","size","GradeSize","translate","chartPoints","boxValue","length","desc","index","Fragment","key","BaseComponent","PercentBox","ShareContainer","children","shareName","restProperties","style","pointerEvents","EmbeddedPCompetitionStateScore","competitionTotal","data","averageValue","populateAverageData","SODComponents","value","populateOverallData","state","overallValue","totalCycleScores","nodes","node","Math","round","type","SocialMetadataType","description","imageResourceFileName","generateUrlForStates","Link","to","Route","width","viewBox","paths","command","SvgIconPathCommand","fill","fillRule","clipRule","component","overall","find","code","SODCycles","SODGrade","measure","SODMeasures","average"],"sourceRoot":""}