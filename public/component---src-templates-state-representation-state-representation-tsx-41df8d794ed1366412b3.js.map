{"version":3,"file":"component---src-templates-state-representation-state-representation-tsx-41df8d794ed1366412b3.js","mappings":"gOAKqBA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KA0HlB,OA1HkBA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACZC,OAAP,WACE,IAAMC,GAAQC,EAAAA,EAAAA,KAAS,kBAAM,yDAC7B,EAOIC,KAAKC,MANPC,EADF,EACEA,YADF,IAEEC,WAAAA,OAFF,MAEe,CAAC,QAFhB,MAGEC,WAAAA,OAHF,MAGe,CAAC,QAHhB,EAIEC,EAJF,EAIEA,OAEAC,GANF,EAKEC,MALF,EAMED,aAGEE,EAAM,EAEJC,EAAaP,EAAYQ,KAAI,SAACC,GAClC,IAAMC,EAAWC,KAAKL,IAAL,MAAAK,MAAI,OAAQF,EAAMG,OAInC,OAFIF,EAAWJ,IAAKA,EAAMI,GAEnBD,EAAMI,QAGf,OACE,gBAACjB,EAAD,CACEkB,OAAQd,EACRe,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,QAAS,CACPC,MAAM,IAGVC,WAAY,CACV,CACEC,WAAY,IACZN,QAAS,CACPO,OAAQ,CACNC,SAAU,SACVC,SAAU,GACVC,QAAS,MAKjBC,YAAa,CACXC,IAAK,CACHC,YAAY,EACZC,aAAc,KAGlBC,MAAO,CACLC,IAAK,EACLzB,IAAAA,EACAa,MAAM,EACNa,WAAY,CACVb,MAAM,EACNd,MAAO,EACP4B,MAAO,WAETC,WAAY,EACZC,OAAQ,CACNC,UAAW,SAAUC,EAAaC,GAChC,OAAUD,EAAV,KAEFE,MAAM,CACJC,OAAQ,UACRC,SAAU,OACVC,WAAY,gBACZC,WAAY,OAIlBC,MAAO,CACLC,KAAM,WACNtC,WAAAA,EACAyB,WAAY,CACVC,MAAO,WAETE,OAAQ,CACNI,MAAO,CACLC,OAAQ,UACRC,SAAU,OACVC,WAAY,gBACZC,WAAY,OAKlBG,KAAM,CACJN,OAAQvC,EACR8C,QAAS,GAEXzB,OAAQ,CACNH,MAAM,GAER6B,KAAM,CACJ7B,MAAM,GAER8B,QAAS,CACPC,SAAS,GAGXC,WAAY,CACVf,UAAW,SAAUC,EAAKC,GACxB,IAAQc,EAAgCd,EAAhCc,YAAaC,EAAmBf,EAAnBe,eACrB,OAAOjD,EACHA,EAAYgD,EAAaC,EAAgBhB,GACxCA,GAEPE,MAAO,CACLC,OAAQtC,EACRuC,SAAU,OACVC,WAAY,gBACZC,WAAY,OAIlBE,KAAK,MACL1C,OAAQA,EACRE,MAAM,SAGX,EA1HkBX,CAA2B4D,EAAAA,GCA3BC,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UA8BlB,OA9BkBA,EACTC,2BAAV,WACE,MAAO,qBACR,EAEM7D,OAAP,WACE,MAA4CG,KAAKC,MAAzC0D,EAAR,EAAQA,YAAqBC,GAA7B,EAAqBC,OAArB,EAA6BD,YAE7B,OACE,gBAAChE,EAAD,CACEM,YAAa,CACX,CACEa,KAAMf,KAAK8D,UAAU,cACrBhD,KAAM,CAAC,EAAG6C,IAEZ,CACE5C,KAAMf,KAAK8D,UAAU,eACrBhD,KAAM,CAAC8C,EAAYA,EAAaD,KAGpCtD,OAAQ,IACRE,MAAO,IACPH,WAAY,CAAC,OAAQ,WACrBD,WAAY,CAAC,UAAW,WACxBG,YAAa,SAACyD,EAAYC,EAAYC,GACpC,OAAmB,IAAfF,GAAmC,IAAfC,EAAyB,GACvCC,EAAV,QAIP,EA9BkBR,CAA+BD,EAAAA,GCI/BU,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAwClB,OAxCkBA,EACTR,2BAAV,WACE,MAAO,qBACR,EAEM7D,OAAP,WAA4B,IAAD,OACjBsE,EAAUnE,KAAKC,MAAfkE,MAER,OACE,uBAAKC,UAAU,4BACb,uBAAKA,UAAU,aACb,sBAAIA,UAAU,oBAAoBpE,KAAK8D,UAAU,uBAEnD,uBAAKM,UAAU,0BACZD,EAAMzD,KAAI,SAAC2D,EAA8BC,GACxC,IAAQV,EACNS,EADMT,WAAYD,EAClBU,EADkBV,YAAaY,EAC/BF,EAD+BE,MAAOV,EACtCQ,EADsCR,OAAQW,EAC9CH,EAD8CG,YAGhD,OACE,uBAAKC,IAAKH,EAAOF,UAAU,gCACzB,sBAAIA,UAAU,wBAAwBG,GACtC,uBAAKH,UAAU,uBACX,gBAACX,EAAD,CACEE,YAAaA,EACbE,OAAQA,EACRD,WAAYA,IAEhB,uBAAKQ,UAAU,uBACb,4BAAOvD,KAAK6D,MAAMb,GAAS,KAC3B,4BAAO,EAAKC,UAAU,YAExB,uBAAKM,UAAU,2BAA2B,EAAKN,UAAU,gBAE3D,uBAAKM,UAAU,uBAAuBI,UAOnD,EAxCkBN,CAA0BV,EAAAA,G,oBCF1BmB,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KAWlB,OAXkBA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACZ9E,OAAP,WACE,IAAQsE,EAAUnE,KAAKC,MAAfkE,MAER,OACE,gBAAC,IAAD,KACGA,EAAMzD,KAAI,SAAC2D,EAAoBC,GAC9B,OAAO,gBAAC,IAAD,CAAaG,IAAKH,EAAOD,KAAMA,SAI7C,EAXkBM,CAA8BnB,EAAAA,G,mEC4B9BoB,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAsWlB,OAtWkBA,EACTlB,2BAAV,WACE,MAAO,+BACR,EAEM7D,OAAP,WACE,MAA8BG,KAAKC,MAA3Ba,EAAR,EAAQA,KAAM+D,EAAd,EAAcA,YACNC,EAAoCD,EAApCC,YAAaC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,YAE1BC,EAQEnE,EARFmE,2BACAC,EAOEpE,EAPFoE,6BACAC,EAMErE,EANFqE,oBACAC,EAKEtE,EALFsE,yBACAC,EAIEvE,EAJFuE,0BACAC,EAGExE,EAHFwE,kBACAC,EAEEzE,EAFFyE,oBACAC,EACE1E,EADF0E,KAGAC,EASET,EATFS,wBACAC,EAQEV,EARFU,0BACAC,EAOEX,EAPFW,+BACAC,EAMEZ,EANFY,+BACAC,EAKEb,EALFa,+BACAC,EAIEd,EAJFc,cACAC,EAGEf,EAHFe,eACAC,EAEEhB,EAFFgB,WACAC,EACEjB,EADFiB,aAEIC,EAAwBlG,KAAKmG,oBAAoBC,EAAAA,GAAAA,OACjDC,EAAgBrG,KAAKmG,oBACzBC,EAAAA,GAAAA,uBAEIE,EAAkBtG,KAAKmG,oBAC3BC,EAAAA,GAAAA,0BAGIG,EAAwBvG,KAAKwG,oBAAoBJ,EAAAA,GAAAA,OACjDK,EAAgBzG,KAAKwG,oBACzBJ,EAAAA,GAAAA,uBAEIM,EAAkB1G,KAAKwG,oBAC3BJ,EAAAA,GAAAA,0BAGIO,EACJxB,EAAoByB,MAAMlG,KAAI,SAACmG,GAC7B,MAAO,CACLC,MAAOD,EAAKC,MACZC,MAAOlG,KAAK6D,MAAmB,IAAbmC,EAAKE,OACvBC,MAAOH,EAAKG,MACZC,OAAQJ,EAAKI,WAGbC,EACJjC,EAA2B2B,MAAMlG,KAAI,SAACmG,GACpC,MAAO,CACLC,MAAOD,EAAKC,MACZK,QAAStG,KAAK6D,MAAmB,IAAbmC,EAAKE,WAGzBK,EACJlC,EAA6B0B,MAAMlG,KAAI,SAACmG,GACtC,MAAO,CACLC,MAAOD,EAAKC,MACZK,QAAStG,KAAK6D,MAAmB,IAAbmC,EAAKE,WAIzBM,EAA6C,eACjD9C,MAAOvE,KAAK8D,UAAU,UACtBU,YAAawB,GACVhG,KAAKsH,wBAAwBhC,IAE5BiC,EAA+C,eACnDhD,MAAOvE,KAAK8D,UAAU,YACtBU,YAAayB,GACVjG,KAAKsH,wBAAwB/B,IAG5BiC,EAAgCpC,EAAyBwB,MAAMlG,KACnE,SAACmG,GACC,MAAO,CACLY,aAAcZ,EAAKa,KACnBX,MAAOlG,KAAK6D,MAAmB,IAAbmC,EAAKE,OACvBxC,MAAOsC,EAAK9B,MACZiC,MAAOH,EAAKG,MACZW,SAAS,WAAWC,EAAAA,EAAAA,sBAAqBf,EAAK9B,OAAtC,sBAKR8C,EAAiCxC,EAA0BuB,MAAMlG,KACrE,SAACmG,GACC,MAAO,CACLY,aAAcZ,EAAKa,KACnBX,MAAOlG,KAAK6D,MAAmB,IAAbmC,EAAKE,OACvBxC,MAAOsC,EAAK9B,MACZiC,MAAOH,EAAKG,MACZW,SAAS,WAAWC,EAAAA,EAAAA,sBAAqBf,EAAK9B,OAAtC,sBAKd,EACE/E,KAAK8H,yBAAyB,CAC5BzB,cAAAA,EACAa,0BAAAA,EACAT,cAAAA,IAJIsB,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,uBAMhC,EACEjI,KAAKkI,0BAA0B,CAC7B5B,gBAAAA,EACAc,4BAAAA,EACAV,gBAAAA,IAJIyB,GAAR,EAAQA,YAAaC,GAArB,EAAqBA,YAAaC,GAAlC,EAAkCA,wBAO5BC,IAAmBV,EAAAA,EAAAA,sBAAqB7C,GAC9C,GAAoCS,EAAKoB,MAAM,GAAvC2B,UAAWC,QAAnB,OAA6B,GAA7B,GAEA,OACE,gBAAC,IAAD,CACEzD,MAAOA,EACP0D,MAAOD,GACPE,gBAAiB5D,EACjBP,MAAUvE,KAAK8D,UAAU,SAApB,IAAgCyC,EAAsBxB,MAAtD,IACLP,YAAaxE,KAAK8D,UAAU,0BAE5B,gBAAC,IAAD,CACEf,KAAM4F,EAAAA,EAAAA,QACNpE,MAAUgC,EAAsBxB,MAA3B,IAAoC/E,KAAK8D,UAAU,SACxDU,YAAaxE,KAAK8D,UAAU,yBAC5B8E,sBAAqB,kCAAmChB,EAAAA,EAAAA,sBACtDrB,EAAsBxB,OADH,SAIvB,gBAAC,IAAD,CACE8D,GAAG,iBACHzE,UAAU,sCAEV,uBAAKA,UAAW,WACd,gBAAC,IAAD,CACEG,MAAOvE,KAAK8D,UAAU,cACtBgF,aAAcjI,KAAK6D,MAAoC,IAA9BwB,EAAsBa,OAC/CgC,eAAgBlI,KAAK6D,MAAoC,IAA9BwB,EAAsBjC,OACjD+E,kBAAmBnI,KAAK6D,MAAoC,IAA9B6B,EAAsBtC,OACpDgF,YAAatC,EACbuC,aAAc3C,EAAsBS,MACpCmC,aAActI,KAAK6D,MAAoC,IAA9B6B,EAAsBQ,OAC/CqC,aAAc,CAAC3D,KAEjB,gBAAC,IAAD,CACE4D,aAAY,UAAYf,GAAZ,kBACZgB,aAAY,4BAA8BhB,GAC1CM,sBAAqB,kCAAmChB,EAAAA,EAAAA,sBACtDrB,EAAsBxB,OADH,WAM3B,gBAAC,IAAD,CAAcX,UAAU,oCACtB,gBAAC,IAAD,CACEmF,kBAAmB/B,EACnBgC,mBAAoB3B,EACpB4B,YAAa,CACXhC,aAAclB,EAAsBmB,KACpCV,MAAOT,EAAsBS,MAC7BD,MAAOlG,KAAK6D,MAAoC,IAA9B6B,EAAsBQ,OACxCxC,MAAOgC,EAAsBxB,MAC7B4C,SAAS,WAAWC,EAAAA,EAAAA,sBAClBrB,EAAsBxB,OADhB,sBAMd,gBAAC,IAAD,CAAcX,UAAU,oCACtB,gBAAC,IAAD,CACEsF,gBAAiB,CACfnF,MAAOvE,KAAK8D,UAAU,yBACtBU,YAAakB,EACbvB,MAAO,CACLwB,EACAC,EACAC,OAKR,gBAAC,IAAD,CAAczB,UAAU,oCACtB,gBAACO,EAAD,CACER,MAAO,CACL,CACEI,MAAOvE,KAAK8D,UAAU,aACtBU,YAAasB,EACb7B,MAAOpD,KAAK6D,MAAyB,IAAnBsD,EAAW/D,OAC7B0F,aAAc9I,KAAK6D,MAAyB,IAAnBqD,EAAW9D,OACpC2F,UAAW3B,GAEb,CACE1D,MAAOvE,KAAK8D,UAAU,cACtBU,YAAauB,EACb9B,MAAOpD,KAAK6D,MAA0B,IAApB0D,GAAYnE,OAC9B0F,aAAc9I,KAAK6D,MAA0B,IAApByD,GAAYlE,OACrC2F,UAAWvB,QAKnB,gBAAC,IAAD,CAAcjE,UAAU,uCACtB,gBAACF,EAAD,CACEC,MAAO,CAACkD,EAAuBE,Q,EAQjCO,yBAAR,SACE+B,GAEA,IAAQxD,EAA4DwD,EAA5DxD,cAAea,EAA6C2C,EAA7C3C,0BAA2BT,EAAkBoD,EAAlBpD,cA4BlD,MAAO,CACLsB,WA5BwB,iBACrB1B,EADqB,CAExBW,MAAO8C,EAAAA,GAAAA,SACP/C,OAAQ,EAAIV,EAAcU,OAASV,EAAcU,MACjD9C,OAAQ,EAAIoC,EAAcpC,OAASoC,EAAcpC,MACjDgD,QAAS,EACT8C,UAAW3D,EAAAA,GAAAA,qBAuBX4B,WApBwB,iBACrBvB,EADqB,CAExBO,MAAO8C,EAAAA,GAAAA,SACP/C,OAAQ,EAAIN,EAAcM,OAASN,EAAcM,MACjD9C,OAAQ,EAAIwC,EAAcxC,OAASwC,EAAcxC,MACjDgD,QAAS,EACT8C,UAAW3D,EAAAA,GAAAA,qBAeX6B,uBAXAf,EAA0BxG,KAAI,SAAC2D,GAC7B,IAAQyC,EAAmBzC,EAAnByC,MAAOK,EAAY9C,EAAZ8C,QACf,MAAO,CACLL,MAAAA,EACAK,QAAStG,KAAK6D,OAAQ,IAAMyC,GAAWA,EAAW,W,EAYlDe,0BAAR,SACE2B,GAEA,IAAQvD,EACNuD,EADMvD,gBAAiBc,EACvByC,EADuBzC,4BAA6BV,EACpDmD,EADoDnD,gBA6BtD,MAAO,CACLyB,YA5ByB,iBACtB7B,EADsB,CAEzBU,MAAO8C,EAAAA,GAAAA,SACP/C,OAAQ,EAAIT,EAAgBS,OAAST,EAAgBS,MACrD9C,OAAQ,EAAIqC,EAAgBrC,OAASqC,EAAgBrC,MACrDgD,QAAS,EACT8C,UAAW3D,EAAAA,GAAAA,sBAuBXgC,YApByB,iBACtB1B,EADsB,CAEzBM,MAAO8C,EAAAA,GAAAA,SACP/C,OAAQ,EAAIL,EAAgBK,OAASL,EAAgBK,MACrD9C,OAAQ,EAAIyC,EAAgBzC,OAASyC,EAAgBzC,MACrDgD,QAAS,EACT8C,UAAW3D,EAAAA,GAAAA,sBAeXiC,wBAXAjB,EAA4B1G,KAAI,SAAC2D,GAC/B,IAAQyC,EAAmBzC,EAAnByC,MAAOK,EAAY9C,EAAZ8C,QACf,MAAO,CACLL,MAAAA,EACAK,QAAStG,KAAK6D,OAAQ,IAAMyC,GAAWA,EAAW,WASzD,EAEOX,oBAAR,SAA4BuD,GAAqC,IAAD,EAgB9D,OAdgC,UADZ/J,KAAKC,MAAMa,KAAvBkJ,QACmCpD,MAAMqD,MAAK,SAACpD,GACrD,OAAOA,EAAKkD,YAAcA,YADI,QAE1B,CACJrC,KAAM,KACNqC,UAAAA,EACAjD,MAAOoD,EAAAA,GAAAA,QACPlD,MAAO8C,EAAAA,GAAAA,SACPK,QAASC,EAAAA,GAAAA,eACTrD,OAAQ,EACRhC,MAAO,KACPd,OAAQ,EACRgD,QAAS,IAIZ,EAEOd,oBAAR,SAA4B4D,GAAqC,IAAD,EAe9D,OAbgC,UADZ/J,KAAKC,MAAMa,KAAvBuJ,QACmCzD,MAAMqD,MAAK,SAACpD,GACrD,OAAOA,EAAKkD,YAAcA,YADI,QAE1B,CACJrC,KAAM,KACNqC,UAAAA,EACAjD,MAAOoD,EAAAA,GAAAA,QACPlD,MAAO8C,EAAAA,GAAAA,SACPK,QAASC,EAAAA,GAAAA,eACTrD,OAAQ,EACRhC,MAAO,KACPd,OAAQ,EACRgD,QAAS,IAGZ,EAEOK,wBAAR,SACEgD,GAEA,MAAO,CACL1G,WAAY/C,KAAK6D,MAKL,IAJV4F,EAAiB1D,MAAMqD,MACrB,SAACM,GAAD,OACEA,EAAYC,eACZC,EAAAA,GAAAA,6BACFxG,OAEJN,YAAa9C,KAAK6D,MAKN,IAJV4F,EAAiB1D,MAAMqD,MACrB,SAACM,GAAD,OACEA,EAAYC,eACZC,EAAAA,GAAAA,8BACFxG,OAEJJ,OAAQhD,KAAK6D,MAID,IAHV4F,EAAiB1D,MAAMqD,MACrB,SAACM,GAAD,OACEA,EAAYC,eAAiBC,EAAAA,GAAAA,yBAC/BxG,SAGP,EAtWkBW,CAAoCpB,EAAAA","sources":["webpack://sod/./src/components/charts/stacked-column/stacked-column.tsx","webpack://sod/./src/components/charts/demographic-parity/demographic-parity.tsx","webpack://sod/./src/components/demographic-parity/demographic-parity.tsx","webpack://sod/./src/components/details/representation/representation-details.tsx","webpack://sod/./src/templates/state-representation/state-representation.tsx"],"sourcesContent":["import loadable from \"@loadable/component\";\nimport React, { ReactNode } from \"react\";\nimport BaseComponent from \"../../../base/base-component\";\nimport { IStackedColumnChartProperties } from \"./stacked-column-interface\";\n\nexport default class StackedColumnChart extends BaseComponent<IStackedColumnChartProperties> {\n  public render(): ReactNode {\n    const Chart = loadable(() => import(\"react-apexcharts\"));\n    const {\n      chartSeries,\n      fillColors = [\"#eee\"],\n      fontColors = [\"#000\"],\n      height,\n      width,\n      onValueShow,\n    } = this.props;\n\n    let max = 0;\n\n    const categories = chartSeries.map((serie) => {\n      const serieMax = Math.max(...serie.data);\n\n      if (serieMax > max) max = serieMax;\n\n      return serie.name;\n    });\n\n    return (\n      <Chart\n        series={chartSeries}\n        options={{\n          chart: {\n            stacked: true,\n            toolbar: {\n              show: false,\n            },\n          },\n          responsive: [\n            {\n              breakpoint: 480,\n              options: {\n                legend: {\n                  position: \"bottom\",\n                  offsetX: -10,\n                  offsetY: 0,\n                },\n              },\n            },\n          ],\n          plotOptions: {\n            bar: {\n              horizontal: false,\n              borderRadius: 10,\n            },\n          },\n          yaxis: {\n            min: 0,\n            max,\n            show: true,\n            axisBorder: {\n              show: true,\n              width: 2,\n              color: '#7E7986',\n            },\n            tickAmount: 1,\n            labels: {\n              formatter: function (val: number, opts?: any) {\n                return `${val}%`;\n              },\n              style:{\n                colors: \"#7E7986\",\n                fontSize: '12px',\n                fontFamily: 'IBM Plex Mono',\n                fontWeight: 400,\n              }\n            },\n          },\n          xaxis: {\n            type: \"category\",\n            categories,\n            axisBorder: {\n              color: '#7E7986',\n            },\n            labels: {\n              style: {\n                colors: \"#7E7986\",\n                fontSize: '12px',\n                fontFamily: 'IBM Plex Mono',\n                fontWeight: 400,\n              },\n            },\n          },\n\n          fill: {\n            colors: fillColors,\n            opacity: 1,\n          },\n          legend: {\n            show: false,\n          },\n          grid: {\n            show: false,\n          },\n          tooltip: {\n            enabled: false,\n          },\n\n          dataLabels: {\n            formatter: function (val, opts) {\n              const { seriesIndex, dataPointIndex } = opts;\n              return onValueShow\n                ? onValueShow(seriesIndex, dataPointIndex, val)\n                : (val as string);\n            },\n            style: {\n              colors: fontColors,\n              fontSize: '16px',\n              fontFamily: 'IBM Plex Mono',\n              fontWeight: 400,\n            },\n          },\n        }}\n        type=\"bar\"\n        height={height}\n        width='70%'\n      />\n    );\n  }\n}\n","import React, { ReactNode } from \"react\";\nimport BaseComponent from \"../../../base/base-component\";\nimport StackedColumnChart from \"../stacked-column/stacked-column\";\nimport { IDemographicParityChartProperties } from \"./demographic-parity-interface\";\n\nexport default class DemographicParityChart extends BaseComponent<IDemographicParityChartProperties> {\n  protected declareTranslateCollection(): string | undefined {\n    return \"demographicParity\";\n  }\n\n  public render(): ReactNode {\n    const { legislature, parity, population } = this.props;\n\n    return (\n      <StackedColumnChart\n        chartSeries={[\n          {\n            name: this.translate(\"population\"),\n            data: [0, legislature],\n          },\n          {\n            name: this.translate(\"legislature\"),\n            data: [population, population - legislature],\n          },\n        ]}\n        height={380}\n        width={260}\n        fontColors={[\"#fff\", \"#4A1D96\"]}\n        fillColors={[\"#4A1D96\", \"#EDE6FA\"]}\n        onValueShow={(serieIndex, pointIndex, value) => {\n          if (serieIndex === 1 && pointIndex === 1) return \"\";\n          return `${value}%`;\n        }}\n      />\n    );\n  }\n}\n","import React, { ReactNode } from \"react\";\nimport BaseComponent from \"../../base/base-component\";\nimport DemographicParityChart from \"../charts/demographic-parity/demographic-parity\";\nimport {\n  IDemographicParityItem,\n  IDemographicParityProperties,\n} from \"./demographic-parity-interface\";\nimport \"./demographic-parity.scss\";\n\nexport default class DemographicParity extends BaseComponent<IDemographicParityProperties> {\n  protected declareTranslateCollection(): string {\n    return \"demographicParity\";\n  }\n\n  public render(): ReactNode {\n    const { items } = this.props;\n\n    return (\n      <div className=\"c-box-wrap c-demographic\">\n        <div className=\"c-section\">\n          <h3 className=\"c-section__title\">{this.translate(\"calculatingParity\")}</h3>\n        </div>\n        <div className=\"row c-demographic-list\">\n          {items.map((item: IDemographicParityItem, index: number) => {\n            const { population, legislature, title, parity, description } =\n              item;\n\n            return (\n              <div key={index} className=\"col-lg-6 c-demographic-items\">\n                <h2 className=\"c-demographic__title\">{title}</h2>\n                <div className=\"c-demographic__wrap\">\n                    <DemographicParityChart\n                      legislature={legislature}\n                      parity={parity}\n                      population={population}\n                    />\n                  <div className=\"c-demographic__info\">\n                    <span>{Math.round(parity)}{\"%\"}</span> \n                    <span>{this.translate(\"parity\")}</span>\n                  </div>\n                  <div className=\"c-demographic__subtitle\">{this.translate(\"population\")}</div>\n                </div>\n                <div className=\"c-demographic__desc\">{description}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../../base/base-component';\nimport DetailsContainer from '../container/details-container';\nimport DetailsItem from '../item/details-item';\nimport { IDetailsItem } from '../item/details-item-interface';\nimport { IRepresentationDetailsProperties } from './representation-details-interface';\n\nexport default class RepresentationDetails extends BaseComponent<IRepresentationDetailsProperties> {\n  public render(): ReactNode {\n    const { items } = this.props;\n\n    return (\n      <DetailsContainer>\n        {items.map((item: IDetailsItem, index: number): ReactNode => {\n          return <DetailsItem key={index} item={item} />;\n        })}\n      </DetailsContainer>\n    );\n  }\n}\n","import { graphql } from 'gatsby';\nimport React, { ReactNode } from 'react';\nimport { generateUrlForStates } from '../../../utils';\nimport BaseComponent from '../../base/base-component';\nimport { ICyclePercentChartPoint } from '../../components/charts/cycle-percent/cycle-percent-interface';\nimport { ICycleScoreChartPoint } from '../../components/charts/cycle-score/cycle-score-interface';\nimport { IDemographicParityChartProperties } from '../../components/charts/demographic-parity/demographic-parity-interface';\nimport ContainerBox from '../../components/container-box/container-box';\nimport CriteriaGrade from '../../components/criteria-grade/criteria-grade';\nimport DemographicParity from '../../components/demographic-parity/demographic-parity';\nimport { IDemographicParityItem } from '../../components/demographic-parity/demographic-parity-interface';\nimport RepresentationDetails from '../../components/details/representation/representation-details';\nimport ImproveBox from '../../components/improve-box/improve-box';\nimport Share from '../../components/share/share';\nimport SocialMetadata from '../../components/social-metadata/social-metadata';\nimport { SocialMetadataType } from '../../components/social-metadata/social-metadata-enum';\nimport StateLayout from '../../components/state-layout/state-layout';\nimport { ISimilarStatesItem } from '../../components/states/similar-states/item/item-interface';\nimport SimilarStates from '../../components/states/similar-states/similar-states';\nimport {\n  SODComponents,\n  SODCycles,\n  SODGrade,\n  SODMeasures,\n  SODSubComponents,\n} from '../../global/global-enum';\nimport { IGraphQLNode, ISODNode } from '../../global/global-interfaces';\nimport {\n  IPopulateRaceComponentDataParameters,\n  IPopulateRaceComponentDataResult,\n  IPopulateSexComponentDataParameters,\n  IPopulateSexComponentDataResult,\n  IStateRepresentationTemplateProperties,\n} from './state-representation-interface';\n\nexport default class StateRepresentationTemplate extends BaseComponent<IStateRepresentationTemplateProperties> {\n  protected declareTranslateCollection(): string | undefined {\n    return 'stateRepresentationTemplate';\n  }\n\n  public render(): ReactNode {\n    const { data, pageContext } = this.props;\n    const { breadCrumbs, state, pageContent } = pageContext;\n    const {\n      representationFemaleParity,\n      representationNonWhiteParity,\n      representationTotal,\n      lesserScoreSimilarStates,\n      greaterScoreSimilarStates,\n      femaleDemoGraphic,\n      nonWhiteDemoGraphic,\n      icon,\n    } = data;\n    const {\n      representationScoreDesc,\n      improveRepresentationDesc,\n      improveRepresentationSolution1,\n      improveRepresentationSolution2,\n      improveRepresentationSolution3,\n      sexParityDesc,\n      raceParityDesc,\n      femaleDesc,\n      nonWhiteDesc,\n    } = pageContent;\n    const representationAverage = this.populateAverageData(SODComponents.TOTAL);\n    const femaleAverage = this.populateAverageData(\n      SODComponents.REPRESENTATION_FEMALE\n    );\n    const nonWhiteAverage = this.populateAverageData(\n      SODComponents.REPRESENTATION_NON_WHITE\n    );\n\n    const representationOverall = this.populateOverallData(SODComponents.TOTAL);\n    const femaleOverall = this.populateOverallData(\n      SODComponents.REPRESENTATION_FEMALE\n    );\n    const nonWhiteOverall = this.populateOverallData(\n      SODComponents.REPRESENTATION_NON_WHITE\n    );\n\n    const totalCycleScores: ICycleScoreChartPoint[] =\n      representationTotal.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          score: Math.round(node.score * 100),\n          grade: node.grade,\n          weight: node.weight,\n        };\n      });\n    const femaleParityCyclePercents: ICyclePercentChartPoint[] =\n      representationFemaleParity.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.score * 100),\n        };\n      });\n    const nonWhiteParityCyclePercents: ICyclePercentChartPoint[] =\n      representationNonWhiteParity.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.score * 100),\n        };\n      });\n\n    const femaleDemoGraphicItem: IDemographicParityItem = {\n      title: this.translate('female'),\n      description: femaleDesc,\n      ...this.populateDemographicData(femaleDemoGraphic),\n    };\n    const nonWhiteDemoGraphicItem: IDemographicParityItem = {\n      title: this.translate('nonWhite'),\n      description: nonWhiteDesc,\n      ...this.populateDemographicData(nonWhiteDemoGraphic),\n    };\n\n    const lesserScoreSimilarStatesItems = lesserScoreSimilarStates.nodes.map(\n      (node): ISimilarStatesItem => {\n        return {\n          abbreviation: node.code,\n          score: Math.round(node.score * 100),\n          title: node.state,\n          grade: node.grade,\n          itemLink: `/state/${generateUrlForStates(node.state)}/representation`,\n        };\n      }\n    );\n\n    const greaterScoreSimilarStatesItems = greaterScoreSimilarStates.nodes.map(\n      (node): ISimilarStatesItem => {\n        return {\n          abbreviation: node.code,\n          score: Math.round(node.score * 100),\n          title: node.state,\n          grade: node.grade,\n          itemLink: `/state/${generateUrlForStates(node.state)}/representation`,\n        };\n      }\n    );\n\n    const { sexAverage, sexOverall, sexParityCyclePercents } =\n      this.populateSexComponentData({\n        femaleAverage,\n        femaleParityCyclePercents,\n        femaleOverall,\n      });\n    const { raceAverage, raceOverall, raceParityCyclePercents } =\n      this.populateRaceComponentData({\n        nonWhiteAverage,\n        nonWhiteParityCyclePercents,\n        nonWhiteOverall,\n      });\n\n    const stateUrl: string = generateUrlForStates(state);\n    const { publicURL: iconUrl = '' } = icon.nodes[0];\n\n    return (\n      <StateLayout\n        state={state}\n        image={iconUrl}\n        breadCrumbItems={breadCrumbs}\n        title={`${this.translate('title')}(${representationOverall.state})`}\n        description={this.translate('firstScoreDescription')}\n      >\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={`${representationOverall.state} ${this.translate('title')}`}\n          description={this.translate('firstScoreDescription')}\n          imageResourceFileName={`embedded-representation-score-${generateUrlForStates(\n            representationOverall.state\n          )}.png`}\n        />\n        <ContainerBox\n          id=\"representation\"\n          className=\"c-section--score is-criteria-grade\"\n        >\n          <div className={'c-score'}>\n            <CriteriaGrade\n              title={this.translate('scoreTitle')}\n              averageScore={Math.round(representationAverage.score * 100)}\n              averagePercent={Math.round(representationAverage.value * 100)}\n              overallPercentage={Math.round(representationOverall.value * 100)}\n              cycleScores={totalCycleScores}\n              overallGrade={representationOverall.grade}\n              overallScore={Math.round(representationOverall.score * 100)}\n              descriptions={[representationScoreDesc]}\n            />\n            <Share\n              absoluteLink={`/state/${stateUrl}/representation`}\n              embeddedLink={`/embedded/representation/${stateUrl}`}\n              imageResourceFileName={`embedded-representation-score-${generateUrlForStates(\n                representationOverall.state\n              )}.png`}\n            />\n          </div>\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--similar\">\n          <SimilarStates\n            lesserScoreStates={lesserScoreSimilarStatesItems}\n            greaterScoreStates={greaterScoreSimilarStatesItems}\n            activeState={{\n              abbreviation: representationOverall.code,\n              grade: representationOverall.grade,\n              score: Math.round(representationOverall.score * 100),\n              title: representationOverall.state,\n              itemLink: `/state/${generateUrlForStates(\n                representationOverall.state\n              )}/representation`,\n            }}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--improve\">\n          <ImproveBox\n            improveBoxItems={{\n              title: this.translate('improveRepresentation'),\n              description: improveRepresentationDesc,\n              items: [\n                improveRepresentationSolution1,\n                improveRepresentationSolution2,\n                improveRepresentationSolution3,\n              ],\n            }}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--details\">\n          <RepresentationDetails\n            items={[\n              {\n                title: this.translate('sexParity'),\n                description: sexParityDesc,\n                value: Math.round(sexOverall.value * 100),\n                averageValue: Math.round(sexAverage.value * 100),\n                chartData: sexParityCyclePercents,\n              },\n              {\n                title: this.translate('raceParity'),\n                description: raceParityDesc,\n                value: Math.round(raceOverall.value * 100),\n                averageValue: Math.round(raceAverage.value * 100),\n                chartData: raceParityCyclePercents,\n              },\n            ]}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--demography\">\n          <DemographicParity\n            items={[femaleDemoGraphicItem, nonWhiteDemoGraphicItem]}\n          />\n        </ContainerBox>\n      </StateLayout>\n    );\n  }\n\n  //We only have female data. so \" 1 - female \" is the male data.\n  private populateSexComponentData(\n    param: IPopulateSexComponentDataParameters\n  ): IPopulateSexComponentDataResult {\n    const { femaleAverage, femaleParityCyclePercents, femaleOverall } = param;\n    const sexAverage: ISODNode = {\n      ...femaleAverage,\n      grade: SODGrade.GRADE_NA,\n      score: (1 - femaleAverage.score) / femaleAverage.score,\n      value: (1 - femaleAverage.value) / femaleAverage.value,\n      weight: -1, //not required so we dont calculate it\n      component: SODComponents.REPRESENTATION_SEX,\n    };\n\n    const sexOverall: ISODNode = {\n      ...femaleOverall,\n      grade: SODGrade.GRADE_NA,\n      score: (1 - femaleOverall.score) / femaleOverall.score,\n      value: (1 - femaleOverall.value) / femaleOverall.value,\n      weight: -1, //not required so we dont calculate it\n      component: SODComponents.REPRESENTATION_SEX,\n    };\n\n    const sexParityCyclePercents: ICyclePercentChartPoint[] =\n      femaleParityCyclePercents.map((item) => {\n        const { cycle, percent } = item;\n        return {\n          cycle,\n          percent: Math.round(((100 - percent) / percent) * 100),\n        };\n      });\n\n    return {\n      sexAverage,\n      sexOverall,\n      sexParityCyclePercents,\n    };\n  }\n\n  //We only have nonWhite data. so \" 1 - nonWhite \" is the white data.\n  private populateRaceComponentData(\n    param: IPopulateRaceComponentDataParameters\n  ): IPopulateRaceComponentDataResult {\n    const { nonWhiteAverage, nonWhiteParityCyclePercents, nonWhiteOverall } =\n      param;\n    const raceAverage: ISODNode = {\n      ...nonWhiteAverage,\n      grade: SODGrade.GRADE_NA,\n      score: (1 - nonWhiteAverage.score) / nonWhiteAverage.score,\n      value: (1 - nonWhiteAverage.value) / nonWhiteAverage.value,\n      weight: -1, //not required so we dont calculate it\n      component: SODComponents.REPRESENTATION_RACE,\n    };\n\n    const raceOverall: ISODNode = {\n      ...nonWhiteOverall,\n      grade: SODGrade.GRADE_NA,\n      score: (1 - nonWhiteOverall.score) / nonWhiteOverall.score,\n      value: (1 - nonWhiteOverall.value) / nonWhiteOverall.value,\n      weight: -1, //not required so we dont calculate it\n      component: SODComponents.REPRESENTATION_RACE,\n    };\n\n    const raceParityCyclePercents: ICyclePercentChartPoint[] =\n      nonWhiteParityCyclePercents.map((item) => {\n        const { cycle, percent } = item;\n        return {\n          cycle,\n          percent: Math.round(((100 - percent) / percent) * 100),\n        };\n      });\n\n    return {\n      raceAverage,\n      raceOverall,\n      raceParityCyclePercents,\n    };\n  }\n\n  private populateOverallData(component: SODComponents): ISODNode {\n    const { overall } = this.props.data;\n    const componentOverall: ISODNode = overall.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.REPRESENTATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n\n    return componentOverall;\n  }\n\n  private populateAverageData(component: SODComponents): ISODNode {\n    const { average } = this.props.data;\n    const componentAverage: ISODNode = average.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.REPRESENTATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n    return componentAverage;\n  }\n\n  private populateDemographicData(\n    subComponentData: IGraphQLNode<ISODNode>\n  ): IDemographicParityChartProperties {\n    return {\n      population: Math.round(\n        subComponentData.nodes.find(\n          (demographic) =>\n            demographic.subComponent ===\n            SODSubComponents.REPRESENTATION_POPULATION\n        ).value * 100\n      ),\n      legislature: Math.round(\n        subComponentData.nodes.find(\n          (demographic) =>\n            demographic.subComponent ===\n            SODSubComponents.REPRESENTATION_LEGISLATURE\n        ).value * 100\n      ),\n      parity: Math.round(\n        subComponentData.nodes.find(\n          (demographic) =>\n            demographic.subComponent === SODSubComponents.REPRESENTATION_PARITY\n        ).value * 100\n      ),\n    };\n  }\n}\nexport const query = graphql`\n  query StateRepresentation($state: String, $score: Float) {\n    representationTotal: allSheetDataRepresentation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Total\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n    representationFemaleParity: allSheetDataRepresentation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Female\" }\n        subComponent: { eq: \"Parity\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n      }\n    }\n    representationNonWhiteParity: allSheetDataRepresentation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"NonWhite\" }\n        subComponent: { eq: \"Parity\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n      }\n    }\n    lesserScoreSimilarStates: allSheetDataRepresentation(\n      sort: { fields: score, order: DESC }\n      filter: {\n        state: { ne: $state }\n        component: { eq: \"Total\" }\n        cycle: { eq: \"Overall\" }\n        score: { lte: $score }\n        abbrev: { ne: \"US Avg\" }\n      }\n      limit: 3\n    ) {\n      nodes {\n        code\n        score\n        state\n        grade\n      }\n    }\n\n    greaterScoreSimilarStates: allSheetDataRepresentation(\n      sort: { fields: score, order: ASC }\n      filter: {\n        state: { ne: $state }\n        component: { eq: \"Total\" }\n        cycle: { eq: \"Overall\" }\n        score: { gte: $score }\n        abbrev: { ne: \"US Avg\" }\n      }\n      limit: 3\n    ) {\n      nodes {\n        code\n        score\n        state\n        grade\n      }\n    }\n    femaleDemoGraphic: allSheetDataRepresentation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Female\" }\n        cycle: { eq: \"2020\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        state\n        measure\n        component\n        subComponent\n        value\n        weight\n      }\n    }\n    nonWhiteDemoGraphic: allSheetDataRepresentation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"NonWhite\" }\n        cycle: { eq: \"2020\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        state\n        measure\n        component\n        subComponent\n        value\n        weight\n      }\n    }\n\n    average: allSheetDataRepresentation(\n      filter: { state: { eq: \"US Average\" }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    overall: allSheetDataRepresentation(\n      filter: { state: { eq: $state }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    icon: allFile(\n      filter: {\n        name: { eq: $state }\n        ext: { eq: \".svg\" }\n        relativeDirectory: { eq: \"images/states\" }\n      }\n    ) {\n      nodes {\n        name\n        publicURL\n        relativeDirectory\n      }\n    }\n  }\n`;\n"],"names":["StackedColumnChart","render","Chart","loadable","this","props","chartSeries","fillColors","fontColors","height","onValueShow","width","max","categories","map","serie","serieMax","Math","data","name","series","options","chart","stacked","toolbar","show","responsive","breakpoint","legend","position","offsetX","offsetY","plotOptions","bar","horizontal","borderRadius","yaxis","min","axisBorder","color","tickAmount","labels","formatter","val","opts","style","colors","fontSize","fontFamily","fontWeight","xaxis","type","fill","opacity","grid","tooltip","enabled","dataLabels","seriesIndex","dataPointIndex","BaseComponent","DemographicParityChart","declareTranslateCollection","legislature","population","parity","translate","serieIndex","pointIndex","value","DemographicParity","items","className","item","index","title","description","key","round","RepresentationDetails","StateRepresentationTemplate","pageContext","breadCrumbs","state","pageContent","representationFemaleParity","representationNonWhiteParity","representationTotal","lesserScoreSimilarStates","greaterScoreSimilarStates","femaleDemoGraphic","nonWhiteDemoGraphic","icon","representationScoreDesc","improveRepresentationDesc","improveRepresentationSolution1","improveRepresentationSolution2","improveRepresentationSolution3","sexParityDesc","raceParityDesc","femaleDesc","nonWhiteDesc","representationAverage","populateAverageData","SODComponents","femaleAverage","nonWhiteAverage","representationOverall","populateOverallData","femaleOverall","nonWhiteOverall","totalCycleScores","nodes","node","cycle","score","grade","weight","femaleParityCyclePercents","percent","nonWhiteParityCyclePercents","femaleDemoGraphicItem","populateDemographicData","nonWhiteDemoGraphicItem","lesserScoreSimilarStatesItems","abbreviation","code","itemLink","generateUrlForStates","greaterScoreSimilarStatesItems","populateSexComponentData","sexAverage","sexOverall","sexParityCyclePercents","populateRaceComponentData","raceAverage","raceOverall","raceParityCyclePercents","stateUrl","publicURL","iconUrl","image","breadCrumbItems","SocialMetadataType","imageResourceFileName","id","averageScore","averagePercent","overallPercentage","cycleScores","overallGrade","overallScore","descriptions","absoluteLink","embeddedLink","lesserScoreStates","greaterScoreStates","activeState","improveBoxItems","averageValue","chartData","param","SODGrade","component","overall","find","SODCycles","measure","SODMeasures","average","subComponentData","demographic","subComponent","SODSubComponents"],"sourceRoot":""}