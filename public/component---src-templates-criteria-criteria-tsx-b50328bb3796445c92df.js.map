{"version":3,"file":"component---src-templates-criteria-criteria-tsx-b50328bb3796445c92df.js","mappings":"4PAgBqBA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAgHlB,OAhHkBA,EACTC,2BAAV,WACE,MAAO,YACR,EAEMC,OAAP,WACE,MAA8BC,KAAKC,MAA3BC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KACfC,EAAsC,GAC5CD,EAAKE,gBAAgBC,MAAMC,SAAQ,SAACC,GAClCJ,EAAYI,EAAQC,OAASD,EAAQE,SAEvC,IACEC,EAaEP,EAbFO,gBACAC,EAYER,EAZFQ,oBACAC,EAWET,EAXFS,qBACAC,EAUEV,EAVFU,sBACAC,EASEX,EATFW,uBACAC,EAQEZ,EARFY,cACAC,EAOEb,EAPFa,kBACAC,EAMEd,EANFc,YACAC,EAKEf,EALFe,gBACAC,EAIEhB,EAJFgB,YACAC,EAGEjB,EAHFiB,gBACAC,EAEElB,EAFFkB,IACAC,EACEnB,EADFmB,QAEEC,EAAW,GAEf,OAAQtB,EAAYuB,MAClB,IAAK,gBACHD,EAAWV,EACX,MACF,IAAK,cACHU,EAAWZ,EACX,MACF,IAAK,iBACHY,EAAWT,EACX,MACF,IAAK,eACHS,EAAWX,EACX,MACF,QACEW,EAAWb,EAGf,OACE,gBAAC,IAAD,CACEF,MAAUP,EAAYwB,QAAjB,IAA4BxB,EAAYuB,KAAxC,IACLD,SAAUA,GAEV,gBAAC,IAAD,CACEG,KAAMC,EAAAA,EAAAA,QACNnB,MAAOT,KAAK6B,UAAU3B,EAAYwB,SAClCI,YAAa9B,KAAK6B,UAAa3B,EAAYwB,QAA9B,eACbK,sBAAqB,YAAc7B,EAAYuB,KAA1B,aAEvB,gBAAC,IAAD,CAAcO,UAAU,iBAAiBC,GAAG,OAC1C,uBAAKD,UAAU,qBACb,uBAAKA,UAAU,uBACb,uBAAKA,UAAU,gBACb,wBAAMA,UAAU,0BACbhC,KAAK6B,UAAU,UAEjBK,EAAAA,EACD,wBAAMF,UAAU,iBACbhC,KAAK6B,UAAU,gBAItB,uBAAKG,UAAU,sCACb,gBAAC,IAAD,CACEG,aAAY,IAAMjC,EAAYuB,KAAlB,QACZW,aAAY,iBAAmBlC,EAAYuB,KAC3CM,sBAAqB,YAAc7B,EAAYwB,QAA1B,eAI3B,gBAAC,IAAD,CACEA,QAASxB,EAAYwB,QACrBvB,KAAMA,EACNkC,WAAW,IAEb,uBAAKL,UAAU,sCACb,gBAAC,IAAD,CACEG,aAAY,IAAMjC,EAAYuB,KAAlB,QACZW,aAAY,iBAAmBlC,EAAYuB,KAC3CM,sBAAqB,YAAc7B,EAAYuB,KAA1B,eAI3B,gBAAC,IAAD,CAAcO,UAAU,mBACtB,gBAAC,IAAD,CACEM,MAAO,CACL,CACE7B,MAAOO,EACPc,YAAab,GAEf,CACER,MAAOW,EACPU,YAAaT,GAEf,CACEZ,MAAOS,EACPY,YAAaX,EACboB,aAAchB,EACdiB,cAAelB,SAO5B,EAhHkBzB,CAAiB4C,EAAAA","sources":["webpack://sod/./src/templates/criteria/criteria.tsx"],"sourcesContent":["import { graphql } from 'gatsby';\nimport React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport SODMapChart from '../../components/charts/map/sod/sod-map-chart';\nimport ContainerBox from '../../components/container-box/container-box';\nimport Layout from '../../components/layout/layout';\nimport Share from '../../components/share/share';\nimport SocialMetadata from '../../components/social-metadata/social-metadata';\nimport { SocialMetadataType } from '../../components/social-metadata/social-metadata-enum';\nimport WhatToDoHome from '../../components/what-to-do-home/what-to-do-home';\nimport { gradeSVG } from '../../global/svg/grades';\nimport {\n  ICriteriaProperties,\n  IPageContentProperties,\n} from './criteria-interface';\n\nexport default class Criteria extends BaseComponent<ICriteriaProperties> {\n  protected declareTranslateCollection(): string {\n    return 'criteria';\n  }\n\n  public render(): ReactNode {\n    const { pageContext, data } = this.props;\n    const pageContent: IPageContentProperties = {};\n    data.homePageContent.nodes.forEach((content) => {\n      pageContent[content.title] = content.value;\n    });\n    const {\n      overallSubtitle,\n      competitionSubtitle,\n      polarizationSubtitle,\n      participationSubtitle,\n      representationSubtitle,\n      findYourState,\n      findYourStateDesc,\n      getInvolved,\n      getInvolvedDesc,\n      getTheFacts,\n      getTheFactsDesc,\n      CTA,\n      CTALink,\n    } = pageContent;\n    let subtitle = '';\n\n    switch (pageContext.name) {\n      case 'participation':\n        subtitle = participationSubtitle;\n        break;\n      case 'competition':\n        subtitle = competitionSubtitle;\n        break;\n      case 'representation':\n        subtitle = representationSubtitle;\n        break;\n      case 'polarization':\n        subtitle = polarizationSubtitle;\n        break;\n      default:\n        subtitle = overallSubtitle;\n    }\n\n    return (\n      <Layout\n        title={`${pageContext.measure}(${pageContext.name})`}\n        subtitle={subtitle}\n      >\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={this.translate(pageContext.measure)}\n          description={this.translate(`${pageContext.measure}Description`)}\n          imageResourceFileName={`embedded-${pageContext.name}-map.png`}\n        />\n        <ContainerBox className=\"c-section--map\" id=\"map\">\n          <div className=\"row c-map-details\">\n            <div className=\"col-md-8 c-map-info\">\n              <div className=\"c-map__grade\">\n                <span className=\"c-grade__text is-title\">\n                  {this.translate('grade')}\n                </span>\n                {gradeSVG}\n                <span className=\"c-grade__text\">\n                  {this.translate('gradeText')}\n                </span>\n              </div>\n            </div>\n            <div className=\"col-md-4 c-map-share u-hide-mobile\">\n              <Share\n                absoluteLink={`/${pageContext.name}/#map`}\n                embeddedLink={`/embedded/map/${pageContext.name}`}\n                imageResourceFileName={`embedded-${pageContext.measure}-map.png`}\n              />\n            </div>\n          </div>\n          <SODMapChart\n            measure={pageContext.measure}\n            data={data}\n            isTooltip={true}\n          />\n          <div className=\"c-map-share is-full u-hide-desktop\">\n            <Share\n              absoluteLink={`/${pageContext.name}/#map`}\n              embeddedLink={`/embedded/map/${pageContext.name}`}\n              imageResourceFileName={`embedded-${pageContext.name}-map.png`}\n            />\n          </div>\n        </ContainerBox>\n        <ContainerBox className=\"c-section--todo\">\n          <WhatToDoHome\n            items={[\n              {\n                title: findYourState,\n                description: findYourStateDesc,\n              },\n              {\n                title: getTheFacts,\n                description: getTheFactsDesc,\n              },\n              {\n                title: getInvolved,\n                description: getInvolvedDesc,\n                moreInfoLink: CTALink,\n                moreInfoTitle: CTA,\n              },\n            ]}\n          />\n        </ContainerBox>\n      </Layout>\n    );\n  }\n}\n\nexport const query = graphql`\n  query GetCriteriaBasedData($measure: String) {\n    overallData: allSheetDataGrandTotal {\n      nodes {\n        code\n        state\n        grade\n      }\n    }\n    all: allSheetDataAllSodData(\n      filter: {\n        measure: { eq: $measure }\n        cycle: { eq: \"Overall\" }\n        component: { eq: \"Total\" }\n      }\n    ) {\n      nodes {\n        code\n        state\n        grade\n      }\n    }\n    allParticipation: allSheetDataParticipation(\n      filter: { cycle: { eq: \"Overall\" }, component: { eq: \"Total\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n      }\n    }\n    allCompetition: allSheetDataCompetition(\n      filter: { cycle: { eq: \"Overall\" }, component: { eq: \"Total\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n      }\n    }\n    allRepresentation: allSheetDataRepresentation(\n      filter: { cycle: { eq: \"Overall\" }, component: { eq: \"Total\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n      }\n    }\n    allPolarization: allSheetDataPolarization(\n      filter: { cycle: { eq: \"Overall\" }, component: { eq: \"Total\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n      }\n    }\n\n    homePageContent: allSheetDataHomepageContent {\n      nodes {\n        title\n        value\n      }\n    }\n  }\n`;\n"],"names":["Criteria","declareTranslateCollection","render","this","props","pageContext","data","pageContent","homePageContent","nodes","forEach","content","title","value","overallSubtitle","competitionSubtitle","polarizationSubtitle","participationSubtitle","representationSubtitle","findYourState","findYourStateDesc","getInvolved","getInvolvedDesc","getTheFacts","getTheFactsDesc","CTA","CTALink","subtitle","name","measure","type","SocialMetadataType","translate","description","imageResourceFileName","className","id","gradeSVG","absoluteLink","embeddedLink","isTooltip","items","moreInfoLink","moreInfoTitle","BaseComponent"],"sourceRoot":""}