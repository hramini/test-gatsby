{"version":3,"file":"component---src-templates-state-polarization-state-polarization-tsx-dfefe5a093daf48f1bcc.js","mappings":"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","sources":["webpack://sod/./src/components/details/polarization/polarization-details.tsx","webpack://sod/./src/templates/state-polarization/state-polarization.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport BaseComponent from '../../../base/base-component';\nimport DetailsContainer from '../container/details-container';\nimport DetailsItem from '../item/details-item';\nimport { IDetailsItem } from '../item/details-item-interface';\nimport { IPolarizationDetailsProperties } from './polarization-details-interface';\n\nexport default class PolarizationDetails extends BaseComponent<IPolarizationDetailsProperties> {\n  public render(): ReactNode {\n    const { items } = this.props;\n\n    return (\n      <DetailsContainer>\n        {items.map((item: IDetailsItem, index: number): ReactNode => {\n          return <DetailsItem key={index} item={item} />;\n        })}\n      </DetailsContainer>\n    );\n  }\n}\n","import { graphql } from 'gatsby';\nimport React, { ReactNode } from 'react';\nimport { generateUrlForStates } from '../../../utils';\nimport BaseComponent from '../../base/base-component';\nimport { ICyclePercentChartPoint } from '../../components/charts/cycle-percent/cycle-percent-interface';\nimport { ICycleScoreChartPoint } from '../../components/charts/cycle-score/cycle-score-interface';\nimport ContainerBox from '../../components/container-box/container-box';\nimport CriteriaGrade from '../../components/criteria-grade/criteria-grade';\nimport PolarizationDetails from '../../components/details/polarization/polarization-details';\nimport ImproveBox from '../../components/improve-box/improve-box';\nimport Share from '../../components/share/share';\nimport SocialMetadata from '../../components/social-metadata/social-metadata';\nimport { SocialMetadataType } from '../../components/social-metadata/social-metadata-enum';\nimport StateLayout from '../../components/state-layout/state-layout';\nimport { ISimilarStatesItem } from '../../components/states/similar-states/item/item-interface';\nimport SimilarStates from '../../components/states/similar-states/similar-states';\nimport {\n  SODComponents,\n  SODCycles,\n  SODGrade,\n  SODMeasures,\n} from '../../global/global-enum';\nimport { ISODNode } from '../../global/global-interfaces';\nimport { IStatePolarizationTemplateProperties } from './state-polarization-interface';\n\nexport default class StatePolarizationTemplate extends BaseComponent<IStatePolarizationTemplateProperties> {\n  protected declareTranslateCollection(): string | undefined {\n    return 'statePolarizationTemplate';\n  }\n\n  public render(): ReactNode {\n    const { data, pageContext } = this.props;\n    const {\n      polarizationHouse,\n      polarizationSenate,\n      polarizationTotal,\n      lesserScoreSimilarStates,\n      greaterScoreSimilarStates,\n      icon,\n    } = data;\n    const { breadCrumbs, state, pageContent } = pageContext;\n    const {\n      polarizationScoreDesc,\n      improvePolarizationDesc,\n      improvePolarizationSolution1,\n      improvePolarizationSolution2,\n      improvePolarizationSolution3,\n      houseDesc,\n      senateDesc,\n    } = pageContent;\n\n    const polarizationAverage = this.populateAverageData(SODComponents.TOTAL);\n    const houseAverage = this.populateAverageData(\n      SODComponents.POLARIZATION_HOUSE\n    );\n    const senateAverage = this.populateAverageData(\n      SODComponents.POLARIZATION_SENATE\n    );\n\n    const polarizationOverall = this.populateOverallData(SODComponents.TOTAL);\n    const houseOverall = this.populateOverallData(\n      SODComponents.POLARIZATION_HOUSE\n    );\n    const senateOverall = this.populateOverallData(\n      SODComponents.POLARIZATION_SENATE\n    );\n\n    const totalCycleScores: ICycleScoreChartPoint[] =\n      polarizationTotal.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          score: Math.round(node.score * 100),\n          grade: node.grade,\n          weight: node.weight,\n        };\n      });\n    const houseCyclePercents: ICyclePercentChartPoint[] =\n      polarizationHouse.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.score * 100),\n        };\n      });\n    const senateCyclePercents: ICyclePercentChartPoint[] =\n      polarizationSenate.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.score * 100),\n        };\n      });\n\n    const lesserScoreSimilarStatesItems = lesserScoreSimilarStates.nodes.map(\n      (node): ISimilarStatesItem => {\n        return {\n          abbreviation: node.code,\n          score: Math.round(node.score * 100),\n          title: node.state,\n          grade: node.grade,\n          itemLink: `/state/${generateUrlForStates(node.state)}/polarization`,\n        };\n      }\n    );\n\n    const greaterScoreSimilarStatesItems = greaterScoreSimilarStates.nodes.map(\n      (node): ISimilarStatesItem => {\n        return {\n          abbreviation: node.code,\n          score: Math.round(node.score * 100),\n          title: node.state,\n          grade: node.grade,\n          itemLink: `/state/${generateUrlForStates(node.state)}/polarization`,\n        };\n      }\n    );\n\n    const stateUrl: string = generateUrlForStates(state);\n    const { publicURL: iconUrl = '' } = icon.nodes[0];\n\n    return (\n      <StateLayout\n        state={state}\n        image={iconUrl}\n        breadCrumbItems={breadCrumbs}\n        title={`${this.translate('title')}(${polarizationOverall.state})`}\n      >\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={`${polarizationOverall.state} ${this.translate('title')}`}\n          description={this.translate('firstScoreDescription')}\n          imageResourceFileName={`embedded-polarization-score-${generateUrlForStates(\n            polarizationOverall.state\n          )}.png`}\n        />\n        <ContainerBox\n          className=\"c-section--score is-criteria-grade\"\n          id=\"polarization\"\n        >\n          <div className=\"c-score\">\n            <CriteriaGrade\n              title={this.translate('scoreTitle')}\n              averageScore={Math.round(polarizationAverage.score * 100)}\n              averagePercent={Number(\n                Number(polarizationAverage.value).toFixed(2)\n              )}\n              overallPercentage={Number(\n                Number(polarizationOverall.value).toFixed(2)\n              )}\n              cycleScores={totalCycleScores}\n              overallGrade={polarizationOverall.grade}\n              overallScore={Math.round(polarizationOverall.score * 100)}\n              descriptions={[polarizationScoreDesc]}\n              isDecimal={true}\n            />\n            <Share\n              absoluteLink={`/state/${stateUrl}/polarization/#polarization`}\n              embeddedLink={`/embedded/polarization/${stateUrl}`}\n              imageResourceFileName={`embedded-polarization-score-${generateUrlForStates(\n                polarizationOverall.state\n              )}.png`}\n            />\n          </div>\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--similar\">\n          <SimilarStates\n            lesserScoreStates={lesserScoreSimilarStatesItems}\n            greaterScoreStates={greaterScoreSimilarStatesItems}\n            activeState={{\n              abbreviation: polarizationOverall.code,\n              grade: polarizationOverall.grade,\n              score: Math.round(polarizationOverall.score * 100),\n              title: polarizationOverall.state,\n              itemLink: `/state/${generateUrlForStates(\n                polarizationOverall.state\n              )}/polarization`,\n            }}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--improve\">\n          <ImproveBox\n            improveBoxItems={{\n              title: this.translate('improvePolarization'),\n              description: improvePolarizationDesc,\n              items: [\n                improvePolarizationSolution1,\n                improvePolarizationSolution2,\n                improvePolarizationSolution3,\n              ],\n            }}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--details\">\n          <PolarizationDetails\n            items={[\n              {\n                title: this.translate('house'),\n                description: houseDesc,\n                value: Number(Number(houseOverall.value).toFixed(2)),\n                averageValue: Number(Number(houseAverage.value).toFixed(2)),\n                isPercent: false,\n                chartData: houseCyclePercents,\n              },\n              {\n                title: this.translate('senate'),\n                description: senateDesc,\n                value: Number(Number(senateOverall.value).toFixed(2)),\n                averageValue: Number(Number(senateAverage.value).toFixed(2)),\n                isPercent: false,\n                chartData: senateCyclePercents,\n              },\n            ]}\n          />\n        </ContainerBox>\n      </StateLayout>\n    );\n  }\n\n  private populateOverallData(component: SODComponents): ISODNode {\n    const { overall } = this.props.data;\n    const componentOverall: ISODNode = overall.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n\n    return componentOverall;\n  }\n\n  private populateAverageData(component: SODComponents): ISODNode {\n    const { average } = this.props.data;\n    const componentAverage: ISODNode = average.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n    return componentAverage;\n  }\n}\n\nexport const query = graphql`\n  query StatePolarization($state: String, $score: Float) {\n    polarizationTotal: allSheetDataPolarization(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Total\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n    polarizationHouse: allSheetDataPolarization(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"House\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n      }\n    }\n    polarizationSenate: allSheetDataPolarization(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Senate\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n      }\n    }\n    lesserScoreSimilarStates: allSheetDataPolarization(\n      sort: { fields: score, order: DESC }\n      filter: {\n        state: { ne: $state }\n        component: { eq: \"Total\" }\n        cycle: { eq: \"Overall\" }\n        score: { lte: $score }\n        abbrev: { ne: \"US Avg\" }\n      }\n      limit: 3\n    ) {\n      nodes {\n        code\n        score\n        state\n        grade\n      }\n    }\n    greaterScoreSimilarStates: allSheetDataPolarization(\n      sort: { fields: score, order: ASC }\n      filter: {\n        state: { ne: $state }\n        component: { eq: \"Total\" }\n        cycle: { eq: \"Overall\" }\n        score: { gte: $score }\n        abbrev: { ne: \"US Avg\" }\n      }\n      limit: 3\n    ) {\n      nodes {\n        code\n        score\n        state\n        grade\n      }\n    }\n    average: allSheetDataPolarization(\n      filter: { state: { eq: \"US Average\" }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    overall: allSheetDataPolarization(\n      filter: { state: { eq: $state }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    icon: allFile(\n      filter: {\n        name: { eq: $state }\n        ext: { eq: \".svg\" }\n        relativeDirectory: { eq: \"images/states\" }\n      }\n    ) {\n      nodes {\n        name\n        publicURL\n        relativeDirectory\n      }\n    }\n  }\n`;\n"],"names":["PolarizationDetails","render","items","this","props","map","item","index","key","BaseComponent","StatePolarizationTemplate","declareTranslateCollection","data","pageContext","polarizationHouse","polarizationSenate","polarizationTotal","lesserScoreSimilarStates","greaterScoreSimilarStates","icon","breadCrumbs","state","pageContent","polarizationScoreDesc","improvePolarizationDesc","improvePolarizationSolution1","improvePolarizationSolution2","improvePolarizationSolution3","houseDesc","senateDesc","polarizationAverage","populateAverageData","SODComponents","houseAverage","senateAverage","polarizationOverall","populateOverallData","houseOverall","senateOverall","totalCycleScores","nodes","node","cycle","score","Math","round","grade","weight","houseCyclePercents","percent","senateCyclePercents","lesserScoreSimilarStatesItems","abbreviation","code","title","itemLink","generateUrlForStates","greaterScoreSimilarStatesItems","stateUrl","publicURL","iconUrl","image","breadCrumbItems","translate","type","SocialMetadataType","description","imageResourceFileName","className","id","averageScore","averagePercent","Number","value","toFixed","overallPercentage","cycleScores","overallGrade","overallScore","descriptions","isDecimal","absoluteLink","embeddedLink","lesserScoreStates","greaterScoreStates","activeState","improveBoxItems","averageValue","isPercent","chartData","component","overall","find","SODCycles","SODGrade","measure","SODMeasures","average"],"sourceRoot":""}