{"version":3,"file":"component---src-templates-state-participation-state-participation-tsx-1e543838a70885c45e87.js","mappings":"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","sources":["webpack://sod/./src/components/details/participation/participation-details.tsx","webpack://sod/./src/templates/state-participation/state-participation.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport BaseComponent from \"../../../base/base-component\";\nimport DetailsContainer from \"../container/details-container\";\nimport DetailsItem from \"../item/details-item\";\nimport { IParticipationDetailsProperties } from \"./participation-details-interface\";\n\nexport default class ParticipationDetails extends BaseComponent<IParticipationDetailsProperties> {\n  protected declareTranslateCollection(): string {\n    return \"participationDetails\";\n  }\n\n  public render(): ReactNode {\n    const { general, primary } = this.props;\n\n    return (\n      <DetailsContainer>\n        <h3 className=\"c-score__title\">{this.translate(\"generalElections\")}</h3>\n        <DetailsItem item={general} showAverage={false} />\n        <h3 className=\"c-score__title\">{this.translate(\"primaryElections\")}</h3>\n        <DetailsItem item={primary} showAverage={false} />\n      </DetailsContainer>\n    );\n  }\n}\n","import { graphql } from 'gatsby';\nimport React, { ReactNode } from 'react';\nimport { generateUrlForStates } from '../../../utils';\nimport BaseComponent from '../../base/base-component';\nimport { ICyclePercentChartPoint } from '../../components/charts/cycle-percent/cycle-percent-interface';\nimport { ICycleScoreChartPoint } from '../../components/charts/cycle-score/cycle-score-interface';\nimport ContainerBox from '../../components/container-box/container-box';\nimport CriteriaGrade from '../../components/criteria-grade/criteria-grade';\nimport ParticipationDetails from '../../components/details/participation/participation-details';\nimport ImproveBox from '../../components/improve-box/improve-box';\nimport Share from '../../components/share/share';\nimport SocialMetadata from '../../components/social-metadata/social-metadata';\nimport { SocialMetadataType } from '../../components/social-metadata/social-metadata-enum';\nimport StateLayout from '../../components/state-layout/state-layout';\nimport { ISimilarStatesItem } from '../../components/states/similar-states/item/item-interface';\nimport SimilarStates from '../../components/states/similar-states/similar-states';\nimport {\n  SODComponents,\n  SODCycles,\n  SODGrade,\n  SODMeasures,\n} from '../../global/global-enum';\nimport { ISODNode } from '../../global/global-interfaces';\nimport { IStateParticipationTemplateProperties } from './state-participation-interface';\n\nexport default class StateParticipationTemplate extends BaseComponent<IStateParticipationTemplateProperties> {\n  protected declareTranslateCollection(): string | undefined {\n    return 'stateParticipationTemplate';\n  }\n\n  public render(): ReactNode {\n    const { data, pageContext } = this.props;\n    const {\n      participationGeneral,\n      participationPrimary,\n      participationTotal,\n      lesserScoreSimilarStates,\n      greaterScoreSimilarStates,\n      icon,\n    } = data;\n    const { breadCrumbs, state, pageContent } = pageContext;\n    const {\n      participationScoreDesc1,\n      participationScoreDesc2,\n      improveParticipationDesc,\n      improveParticipationSolution1,\n      improveParticipationSolution2,\n      improveParticipationSolution3,\n      generalElectionDesc,\n      primaryElectionDesc,\n    } = pageContent;\n\n    const participationAverage = this.populateAverageData(SODComponents.TOTAL);\n    const generalAverage = this.populateAverageData(\n      SODComponents.PARTICIPATION_GENERAL_ELECTION\n    );\n    const primaryAverage = this.populateAverageData(\n      SODComponents.PARTICIPATION_PRIMARY_ELECTION\n    );\n\n    const participationOverall = this.populateOverallData(SODComponents.TOTAL);\n    const generalOverall = this.populateOverallData(\n      SODComponents.PARTICIPATION_GENERAL_ELECTION\n    );\n    const primaryOverall = this.populateOverallData(\n      SODComponents.PARTICIPATION_PRIMARY_ELECTION\n    );\n\n    const totalCycleScores: ICycleScoreChartPoint[] =\n      participationTotal.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          score: Math.round(node.score * 100),\n          grade: node.grade,\n          weight: node.weight,\n        };\n      });\n    const primaryCyclePercents: ICyclePercentChartPoint[] =\n      participationPrimary.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.score * 100),\n        };\n      });\n    const generalCyclePercents: ICyclePercentChartPoint[] =\n      participationGeneral.nodes.map((node) => {\n        return {\n          cycle: node.cycle,\n          percent: Math.round(node.score * 100),\n        };\n      });\n\n    const lesserScoreSimilarStatesItems = lesserScoreSimilarStates.nodes.map(\n      (node): ISimilarStatesItem => {\n        return {\n          abbreviation: node.code,\n          score: Math.round(node.score * 100),\n          title: node.state,\n          grade: node.grade,\n          itemLink: `/state/${generateUrlForStates(node.state)}/participation`,\n        };\n      }\n    );\n\n    const greaterScoreSimilarStatesItems = greaterScoreSimilarStates.nodes.map(\n      (node): ISimilarStatesItem => {\n        return {\n          abbreviation: node.code,\n          score: Math.round(node.score * 100),\n          title: node.state,\n          grade: node.grade,\n          itemLink: `/state/${generateUrlForStates(node.state)}/participation`,\n        };\n      }\n    );\n\n    const stateUrl: string = generateUrlForStates(state);\n\n    const { publicURL: iconUrl = '' } = icon.nodes[0];\n\n    return (\n      <StateLayout\n        state={state}\n        image={iconUrl}\n        breadCrumbItems={breadCrumbs}\n        title={`${this.translate('title')}(${participationOverall.state})`}\n        description={this.translate('firstScoreDescription')}\n      >\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={`${participationOverall.state} ${this.translate('title')}`}\n          description={this.translate('firstScoreDescription')}\n          imageResourceFileName={`embedded-participation-score-${generateUrlForStates(\n            participationOverall.state\n          )}.png`}\n        />\n        <ContainerBox\n          className=\"c-section--score is-criteria-grade\"\n          id=\"participation\"\n        >\n          <div className=\"c-score\">\n            <CriteriaGrade\n              title={this.translate('scoreTitle')}\n              averageScore={Math.round(participationAverage.value * 100)}\n              averagePercent={Math.round(participationAverage.value * 100)}\n              overallPercentage={Math.round(participationOverall.value * 100)}\n              cycleScores={totalCycleScores}\n              overallGrade={participationOverall.grade}\n              overallScore={Math.round(participationOverall.score * 100)}\n              descriptions={[participationScoreDesc1, participationScoreDesc2]}\n              simpleMode={true}\n            />\n            <Share\n              absoluteLink={`/state/${stateUrl}/participation`}\n              embeddedLink={`/embedded/participation/${stateUrl}`}\n              imageResourceFileName={`embedded-participation-score-${generateUrlForStates(\n                participationOverall.state\n              )}.png`}\n            />\n          </div>\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--similar\">\n          <SimilarStates\n            lesserScoreStates={lesserScoreSimilarStatesItems}\n            greaterScoreStates={greaterScoreSimilarStatesItems}\n            activeState={{\n              abbreviation: participationOverall.code,\n              grade: participationOverall.grade,\n              score: Math.round(participationOverall.score * 100),\n              title: participationOverall.state,\n              itemLink: `/state/${generateUrlForStates(\n                participationOverall.state\n              )}/participation`,\n            }}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--improve\">\n          <ImproveBox\n            improveBoxItems={{\n              title: this.translate('improveParticipation'),\n              description: improveParticipationDesc,\n              items: [\n                improveParticipationSolution1,\n                improveParticipationSolution2,\n                improveParticipationSolution3,\n              ],\n            }}\n          />\n        </ContainerBox>\n        <ContainerBox className=\"c-section-box c-section--details\">\n          <ParticipationDetails\n            general={{\n              title: this.translate('usAverage'),\n              description: generalElectionDesc,\n              value: Math.round(generalAverage.value * 100),\n              averageValue: Math.round(generalAverage.value * 100),\n              chartData: generalCyclePercents,\n            }}\n            primary={{\n              title: this.translate('usAverage'),\n              description: primaryElectionDesc,\n              value: Math.round(primaryAverage.value * 100),\n              averageValue: Math.round(primaryAverage.value * 100),\n              chartData: primaryCyclePercents,\n            }}\n          />\n        </ContainerBox>\n      </StateLayout>\n    );\n  }\n\n  private populateOverallData(component: SODComponents): ISODNode {\n    const { overall } = this.props.data;\n    const componentOverall: ISODNode = overall.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n\n    return componentOverall;\n  }\n\n  private populateAverageData(component: SODComponents): ISODNode {\n    const { average } = this.props.data;\n    const componentAverage: ISODNode = average.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n    return componentAverage;\n  }\n}\n\nexport const query = graphql`\n  query StateParticipation($state: String, $score: Float) {\n    participationTotal: allSheetDataParticipation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Total\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n\n    participationGeneral: allSheetDataParticipation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"General\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n      }\n    }\n\n    participationPrimary: allSheetDataParticipation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Primary\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n      }\n    }\n\n    lesserScoreSimilarStates: allSheetDataParticipation(\n      sort: { fields: score, order: DESC }\n      filter: {\n        state: { ne: $state }\n        component: { eq: \"Total\" }\n        cycle: { eq: \"Overall\" }\n        score: { lte: $score }\n        abbrev: { ne: \"US Avg\" }\n      }\n      limit: 3\n    ) {\n      nodes {\n        code\n        score\n        state\n        grade\n      }\n    }\n\n    greaterScoreSimilarStates: allSheetDataParticipation(\n      sort: { fields: score, order: ASC }\n      filter: {\n        state: { ne: $state }\n        component: { eq: \"Total\" }\n        cycle: { eq: \"Overall\" }\n        score: { gte: $score }\n        abbrev: { ne: \"US Avg\" }\n      }\n      limit: 3\n    ) {\n      nodes {\n        code\n        score\n        state\n        grade\n      }\n    }\n\n    average: allSheetDataParticipation(\n      filter: { state: { eq: \"US Average\" }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    overall: allSheetDataParticipation(\n      filter: { state: { eq: $state }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n    icon: allFile(\n      filter: {\n        name: { eq: $state }\n        ext: { eq: \".svg\" }\n        relativeDirectory: { eq: \"images/states\" }\n      }\n    ) {\n      nodes {\n        name\n        publicURL\n        relativeDirectory\n      }\n    }\n  }\n`;\n"],"names":["ParticipationDetails","declareTranslateCollection","render","this","props","general","primary","className","translate","item","showAverage","BaseComponent","StateParticipationTemplate","data","pageContext","participationGeneral","participationPrimary","participationTotal","lesserScoreSimilarStates","greaterScoreSimilarStates","icon","breadCrumbs","state","pageContent","participationScoreDesc1","participationScoreDesc2","improveParticipationDesc","improveParticipationSolution1","improveParticipationSolution2","improveParticipationSolution3","generalElectionDesc","primaryElectionDesc","participationAverage","populateAverageData","SODComponents","generalAverage","primaryAverage","participationOverall","populateOverallData","totalCycleScores","nodes","map","node","cycle","score","Math","round","grade","weight","primaryCyclePercents","percent","generalCyclePercents","lesserScoreSimilarStatesItems","abbreviation","code","title","itemLink","generateUrlForStates","greaterScoreSimilarStatesItems","stateUrl","publicURL","iconUrl","image","breadCrumbItems","description","type","SocialMetadataType","imageResourceFileName","id","averageScore","value","averagePercent","overallPercentage","cycleScores","overallGrade","overallScore","descriptions","simpleMode","absoluteLink","embeddedLink","lesserScoreStates","greaterScoreStates","activeState","improveBoxItems","items","averageValue","chartData","component","overall","find","SODCycles","SODGrade","measure","SODMeasures","average"],"sourceRoot":""}