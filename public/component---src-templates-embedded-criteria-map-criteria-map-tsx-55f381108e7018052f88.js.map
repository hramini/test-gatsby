{"version":3,"file":"component---src-templates-embedded-criteria-map-criteria-map-tsx-55f381108e7018052f88.js","mappings":"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","sources":["webpack://sod/./src/global/svg/close.tsx","webpack://sod/./src/components/charts/map/sod/tooltip-body/sod-map-chart-tooltip-body.tsx","webpack://sod/./src/components/charts/map/sod/sod-map-chart.tsx","webpack://sod/./src/components/grade/grade-enum.tsx","webpack://sod/./src/components/grade/grade.tsx","webpack://sod/./src/components/share-container/share-container.tsx","webpack://sod/./src/components/social-metadata/social-metadata-enum.tsx","webpack://sod/./src/components/social-metadata/social-metadata.tsx","webpack://sod/./src/global/global-enum.tsx","webpack://sod/./src/templates/embedded/criteria-map/criteria-map.tsx","webpack://sod/./utils.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import React, { ReactNode } from 'react';\n\nexport const closeSVG: ReactNode = (\n  <svg\n    width=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"#F7F7F8\" />\n    <path\n      d=\"m16.667 8.274-.94-.94L12 11.06 8.273 7.333l-.94.94L11.06 12l-3.727 3.727.94.94L12 12.94l3.727 3.727.94-.94L12.94 12l3.727-3.726Z\"\n      fill=\"#4B4950\"\n    />\n  </svg>\n);\n","import { Link } from 'gatsby';\nimport React, { ReactNode } from 'react';\nimport { generateUrlForStates } from '../../../../../../utils';\nimport BaseComponent from '../../../../../base/base-component';\nimport { SODMeasures } from '../../../../../global/global-enum';\nimport { closeSVG } from '../../../../../global/svg/close';\nimport Grade from '../../../../grade/grade';\nimport { GradeSize } from '../../../../grade/grade-enum';\nimport SvgIcon from '../../../../svg-icon/svg-icon';\nimport { SvgIconPathCommand } from '../../../../svg-icon/svg-icon-enum';\nimport { ISODMapChartTooltipBodyProperties } from './sod-map-chart-tooltip-body-interface';\nimport './sod-map-chart-tooltip-body.scss';\n\nexport default class SODMapChartTooltipBody extends BaseComponent<ISODMapChartTooltipBodyProperties> {\n  public render(): ReactNode {\n    const {\n      currentStateData,\n      competitionData,\n      participationData,\n      polarizationData,\n      representationData,\n      measure,\n    } = this.props;\n\n    const criteria =\n      measure === SODMeasures.GRAND_TOTAL\n        ? 'overall'\n        : `${measure.toLocaleLowerCase()}`;\n    return (\n      <div className=\"sod-map-tooltip\">\n        <div className=\"sod-map-tooltip__title\">\n          {currentStateData.state}\n          {this.isMobileDevice() && (\n            <button\n              type=\"button\"\n              aria-label=\"Close\"\n              onClick={(): void => {\n                this.props.removeTooltipContent();\n              }}\n            >\n              {closeSVG}\n            </button>\n          )}\n        </div>\n\n        <div className=\"sod-map-tooltip__body\">\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.GRAND_TOTAL ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={currentStateData.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Overall</div>\n          </div>\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.PARTICIPATION ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={participationData?.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Participation</div>\n          </div>\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.COMPETITION ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={competitionData?.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Competition</div>\n          </div>\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.REPRESENTATION ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={representationData?.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Representation</div>\n          </div>\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.POLARIZATION ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={polarizationData?.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Polarization</div>\n          </div>\n        </div>\n\n        <div\n          className=\"sod-map-tooltip__footer\"\n          onTouchStart={(): void => {\n            window.location.href = `/state/${generateUrlForStates(\n              currentStateData.state\n            )}/${criteria}`;\n          }}\n        >\n          <Link\n            to={`/state/${generateUrlForStates(\n              currentStateData.state\n            )}/${criteria}`}\n          >\n            Click to learn more\n            <SvgIcon\n              width=\"14\"\n              viewBox=\"0 0 14 10\"\n              paths={[\n                {\n                  command: SvgIconPathCommand.M9_ARROW_RIGHT,\n                  fill: '#000',\n                },\n              ]}\n            />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Fragment, ReactChild, ReactNode } from 'react';\nimport { Geography } from 'react-simple-maps';\nimport { generateUrlForStates } from '../../../../../utils';\nimport BaseComponent from '../../../../base/base-component';\nimport { SODMeasures } from '../../../../global/global-enum';\nimport { SODGradeColor } from '../../../../global/grade-color-enum';\nimport { ICriteriaData } from '../../../../templates/criteria/criteria-interface';\nimport {\n  ISODMapChartData,\n  ISODMapChartProperties,\n  ISODMapChartState,\n} from './sod-map-chart-interface';\nimport SODMapChartTooltipBody from './tooltip-body/sod-map-chart-tooltip-body';\nimport MapChart from '../map-chart';\n\nexport default class SODMapChart extends BaseComponent<\n  ISODMapChartProperties,\n  ISODMapChartState\n> {\n  public constructor(properties: ISODMapChartProperties) {\n    super(properties);\n\n    this.state = {};\n  }\n\n  private findTooltipData(\n    nodes: ISODMapChartData[],\n    code: string\n  ): ISODMapChartData {\n    return nodes.find((node) => node.code === code);\n  }\n\n  private setTooltipContent(\n    data: ICriteriaData,\n    currentState: ISODMapChartData\n  ): void {\n    const {\n      allParticipation: { nodes: allParticipationNodes },\n      allCompetition: { nodes: allCompetitionNodes },\n      allRepresentation: { nodes: allRepresentationNodes },\n      allPolarization: { nodes: allPolarizationNodes },\n    } = data;\n    const { code } = currentState;\n    const participationData: ISODMapChartData = this.findTooltipData(\n      allParticipationNodes,\n      code\n    );\n    const competitionData: ISODMapChartData = this.findTooltipData(\n      allCompetitionNodes,\n      code\n    );\n    const polarizationData: ISODMapChartData = this.findTooltipData(\n      allPolarizationNodes,\n      code\n    );\n    const representationData: ISODMapChartData = this.findTooltipData(\n      allRepresentationNodes,\n      code\n    );\n\n    this.setState({\n      currentStateData: currentState,\n      participationData,\n      representationData,\n      polarizationData,\n      competitionData,\n    });\n  }\n\n  private removeTooltipContent(): void {\n    this.setState({\n      currentStateData: undefined,\n    });\n  }\n\n  public render(): ReactNode {\n    const { measure, data, isTooltip } = this.props;\n    const {\n      currentStateData,\n      competitionData,\n      participationData,\n      polarizationData,\n      representationData,\n    } = this.state;\n    const {\n      all: { nodes: allNodes },\n      overallData,\n    } = data;\n\n    return (\n      <MapChart\n        isTooltip={isTooltip}\n        tooltipBody={(): ReactChild => {\n          return currentStateData ? (\n            <SODMapChartTooltipBody\n              currentStateData={currentStateData}\n              competitionData={competitionData}\n              participationData={participationData}\n              polarizationData={polarizationData}\n              representationData={representationData}\n              measure={measure}\n              removeTooltipContent={(): void => {\n                this.removeTooltipContent();\n              }}\n            />\n          ) : (\n            ''\n          );\n        }}\n      >\n        {({ geographies }) =>\n          geographies.map((geo) => {\n            const currentOverallState = allNodes.find(\n              (s) => s.state === geo.properties.name\n            );\n            if (overallData) {\n              var currentOverallData = overallData.nodes.find(\n                (s) => s.state === geo.properties.name\n              );\n            } else {\n              var currentOverallData = allNodes.find(\n                (s) => s.state === geo.properties.name\n              );\n            }\n\n            return (\n              <Fragment key={geo.rsmKey}>\n                <Geography\n                  geography={geo}\n                  stroke=\"#fff\"\n                  onMouseEnter={(event): void => {\n                    isTooltip &&\n                      this.setTooltipContent(data, currentOverallData);\n                    const rect = event.currentTarget.getBoundingClientRect();\n                  }}\n                  onMouseLeave={(): void => {\n                    isTooltip && this.removeTooltipContent();\n                  }}\n                  onClick={(): void => {\n                    if (!this.isMobileDevice()) {\n                      const { name } = geo.properties;\n                      window.location.href = `/state/${generateUrlForStates(\n                        name\n                      )}/${\n                        measure === SODMeasures.GRAND_TOTAL\n                          ? 'overall'\n                          : measure.toLocaleLowerCase()\n                      }`;\n                    }\n                  }}\n                  onTouchStart={(ev): void => {\n                    this.setTooltipContent(data, currentOverallData);\n                  }}\n                  style={{\n                    default: {\n                      fill: SODGradeColor[currentOverallState?.grade] ?? '#eee',\n                      outline: 'none',\n                    },\n                    hover: {\n                      fill: 'current',\n                      outline: 'none',\n                      cursor: 'pointer',\n                      strokeWidth: 2,\n                      opacity: 1,\n                      position: 'relative',\n                      zIndex: 9,\n                    },\n                    pressed: {\n                      fill: '#E42',\n                      outline: 'none',\n                    },\n                  }}\n                />\n              </Fragment>\n            );\n          })\n        }\n      </MapChart>\n    );\n  }\n}\n","export enum GradeSize {\n  SMALL = \"small\",\n  MEDIUM = \"medium\",\n  LARGE = \"large\",\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport { SODGradeColor } from '../../global/grade-color-enum';\nimport { IGrade } from './grade-interface';\nimport './grade.scss';\n\nexport default class Grade extends BaseComponent<IGrade> {\n  public render(): ReactNode {\n    const { grade, size } = this.props;\n    const sizeClassName = `c-grade--${size} c-grade-box`;\n    const rootClassName = `c-grade ${sizeClassName}`;\n    const symbolClassName = `${sizeClassName}__symbol`;\n    return (\n      <div\n        className={rootClassName}\n        // style={{\n        //   backgroundColor: SODGradeColor[grade],\n        // }}\n      >\n        <div className={symbolClassName}>{grade}</div>\n        <div\n          className=\"c-grade__bg\"\n          style={{ backgroundColor: SODGradeColor[grade] }}\n        ></div>\n      </div>\n    );\n  }\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport { IShareContainerProperties } from './share-container-interface';\n\nexport default class ShareContainer extends BaseComponent<IShareContainerProperties> {\n  public render(): ReactNode {\n    const { children, shareName, ...restProperties } = this.props;\n\n    return (\n      <div\n        data-id=\"share\"\n        data-name={shareName}\n        {...restProperties}\n        style={{\n          pointerEvents: 'none',\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n","export enum SocialMetadataType {\n  SUMMARY = 'summary',\n  SUMMARY_LARGE_IMAGE = 'summary_large_image',\n  OBJECT = 'object',\n}\n","import React, { ReactNode } from 'react';\nimport { Helmet } from 'react-helmet';\nimport BaseComponent from '../../base/base-component';\nimport { SocialMetadataType } from './social-metadata-enum';\nimport { ISocialMetadataProperties } from './social-metadata-interface';\n\nexport default class SocialMetadata extends BaseComponent<ISocialMetadataProperties> {\n  public render(): ReactNode {\n    const { title, description, imageResourceFileName, type } = this.props;\n    const imageSourceContent: string = `${this.getResourcesPath()}/${imageResourceFileName}`;\n\n    return (\n      <Helmet\n        meta={[\n          {\n            property: 'og:title',\n            content: title,\n          },\n          {\n            property: 'og:type',\n            content: SocialMetadataType.OBJECT,\n          },\n          {\n            property: 'og:description',\n            content: description,\n          },\n          {\n            property: 'og:image',\n            content: imageSourceContent,\n          },\n          {\n            name: 'twitter:card',\n            content: type,\n          },\n          {\n            name: 'twitter:title',\n            content: title,\n          },\n          {\n            name: 'twitter:image:src',\n            content: imageSourceContent,\n          },\n          {\n            name: 'twitter:description',\n            content: description,\n          },\n        ]}\n      />\n    );\n  }\n\n  protected getResourcesPath(): string {\n    return `${process.env.SITE_URL}/static/images`;\n  }\n}\n","export enum SODComponents {\n  COMPETITION_WINNERS_SHARE = \"Winner's Share\",\n  COMPETITION_MARGIN_OF_VICTORY = \"Margin of Victory\",\n  COMPETITION_UNCOMPETITIVE_SEATS = \"Uncompetetive Seats\",\n  COMPETITION_UNCONTESTED_RACES = \"Uncontested Races\",\n  PARTICIPATION_PRIMARY_ELECTION = \"Primary\",\n  PARTICIPATION_GENERAL_ELECTION = \"General\",\n  POLARIZATION_HOUSE = \"House\",\n  POLARIZATION_SENATE = \"Senate\",\n  REPRESENTATION_SEX = \"Sex\",\n  REPRESENTATION_RACE = \"Race\",\n  REPRESENTATION_NON_WHITE = \"NonWhite\",\n  REPRESENTATION_FEMALE = \"Female\",\n  TOTAL = \"Total\",\n}\n\nexport enum SODSubComponents {\n  REPRESENTATION_PARITY = \"Parity\",\n  REPRESENTATION_POPULATION = \"Population\",\n  REPRESENTATION_LEGISLATURE = \"Legislature\",\n}\n\nexport enum SODCycles {\n  YEAR_2012 = \"2012\",\n  YEAR_2014 = \"2014\",\n  YEAR_2016 = \"2016\",\n  YEAR_2018 = \"2018\",\n  YEAR_2020 = \"2020\",\n  OVERALL = \"Overall\",\n}\n\nexport enum SODMeasures {\n  COMPETITION = \"Competition\",\n  REPRESENTATION = \"Representation\",\n  PARTICIPATION = \"Participation\",\n  POLARIZATION = \"Polarization\",\n  GRAND_TOTAL = \"GrandTotal\",\n}\n\nexport enum SODGrade {\n  GRADE_A_PLUS = \"A+\",\n  GRADE_A = \"A\",\n  GRADE_A_MINUS = \"A-\",\n  GRADE_B_PLUS = \"B+\",\n  GRADE_B = \"B\",\n  GRADE_B_MINUS = \"B-\",\n  GRADE_C_PLUS = \"C+\",\n  GRADE_C = \"C\",\n  GRADE_C_MINUS = \"C-\",\n  GRADE_D_PLUS = \"D+\",\n  GRADE_D = \"D\",\n  GRADE_D_MINUS = \"D-\",\n  GRADE_F_PLUS = \"F+\",\n  GRADE_F = \"F\",\n  GRADE_F_MINUS = \"F-\",\n  GRADE_NA = \"NA\",\n}\n","import { graphql, Link } from 'gatsby';\nimport React, { Fragment, ReactNode } from 'react';\nimport BaseComponent from '../../../base/base-component';\nimport SODMapChart from '../../../components/charts/map/sod/sod-map-chart';\nimport ContainerBox from '../../../components/container-box/container-box';\nimport ShareContainer from '../../../components/share-container/share-container';\nimport SocialMetadata from '../../../components/social-metadata/social-metadata';\nimport { SocialMetadataType } from '../../../components/social-metadata/social-metadata-enum';\nimport SvgIcon from '../../../components/svg-icon/svg-icon';\nimport { SvgIconPathCommand } from '../../../components/svg-icon/svg-icon-enum';\nimport { Route } from '../../../global/route-enum';\nimport { IEmbeddedCriteriaMapProperties } from './criteria-map-interface';\n\nexport default class EmbeddedCriteriaMap extends BaseComponent<IEmbeddedCriteriaMapProperties> {\n  protected declareTranslateCollection(): string {\n    return 'criteriaMapTemplate';\n  }\n\n  public render(): ReactNode {\n    const { data, pageContext } = this.props;\n    const { measure, name } = pageContext;\n\n    return (\n      <Fragment>\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={this.translate(`${name}Title`)}\n          description={this.translate(`${name}Description`)}\n          imageResourceFileName={`embedded-${name}-map.png`}\n        />\n        <ContainerBox className=\"c-section--embed\">\n          <ShareContainer className=\"c-embed__wrap\" shareName={`${name}-map`}>\n            <div className=\"c-embed__box\">\n              <h2 className=\"c-score__title\">\n                {this.translate(`${name}Title`)}\n              </h2>\n              <SODMapChart data={data} measure={measure} />\n            </div>\n            <div className=\"c-embed__logo\">\n              <Link to={Route.HOME}>\n                <SvgIcon\n                  width=\"111\"\n                  viewBox=\"0 0 208 44\"\n                  paths={[\n                    {\n                      command: SvgIconPathCommand.STATE_OF_DEMOCRACY,\n                      fill: '#0D0C0D',\n                    },\n                    {\n                      fillRule: 'evenodd',\n                      clipRule: 'evenodd',\n                      command: SvgIconPathCommand.LOGO_EAST,\n                      fill: '#C7AFF0',\n                    },\n                    {\n                      fillRule: 'evenodd',\n                      clipRule: 'evenodd',\n                      command: SvgIconPathCommand.LOGO_WEST,\n                      fill: '#4A1D96',\n                    },\n                  ]}\n                />\n              </Link>\n            </div>\n          </ShareContainer>\n        </ContainerBox>\n      </Fragment>\n    );\n  }\n}\n\nexport const query = graphql`\n  query GetEmbeddedCriteriaMapData($measure: String) {\n    all: allSheetDataAllSodData(\n      filter: {\n        measure: { eq: $measure }\n        cycle: { eq: \"Overall\" }\n        component: { eq: \"Total\" }\n      }\n    ) {\n      nodes {\n        code\n        state\n        grade\n      }\n    }\n  }\n`;\n","function generateUrlForStates(stateName) {\n  return stateName.toLowerCase().replace(\" \", \"-\");\n}\n\nmodule.exports = {\n  generateUrlForStates,\n};\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["closeSVG","width","viewBox","fill","xmlns","cx","cy","r","d","SODMapChartTooltipBody","render","this","props","currentStateData","competitionData","participationData","polarizationData","representationData","measure","criteria","SODMeasures","toLocaleLowerCase","className","state","isMobileDevice","type","onClick","removeTooltipContent","grade","size","GradeSize","onTouchStart","window","location","href","generateUrlForStates","Link","to","paths","command","SvgIconPathCommand","BaseComponent","SODMapChart","properties","findTooltipData","nodes","code","find","node","setTooltipContent","data","currentState","allParticipationNodes","allParticipation","allCompetitionNodes","allCompetition","allRepresentationNodes","allRepresentation","allPolarizationNodes","allPolarization","setState","undefined","isTooltip","allNodes","all","overallData","tooltipBody","geographies","map","geo","currentOverallState","s","name","currentOverallData","Fragment","key","rsmKey","Geography","geography","stroke","onMouseEnter","event","currentTarget","getBoundingClientRect","onMouseLeave","ev","style","default","SODGradeColor","outline","hover","cursor","strokeWidth","opacity","position","zIndex","pressed","Grade","sizeClassName","rootClassName","symbolClassName","backgroundColor","ShareContainer","children","shareName","restProperties","pointerEvents","SocialMetadataType","SocialMetadata","title","description","imageResourceFileName","imageSourceContent","getResourcesPath","meta","property","content","process","SODComponents","SODSubComponents","SODCycles","SODGrade","EmbeddedCriteriaMap","declareTranslateCollection","pageContext","translate","Route","fillRule","clipRule","module","exports","stateName","toLowerCase","replace","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","_objectWithoutPropertiesLoose","source","excluded","sourceKeys","keys","indexOf"],"sourceRoot":""}