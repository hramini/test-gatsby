{"version":3,"file":"component---src-templates-embedded-overall-map-overall-map-tsx-f425b726fbe9875c72de.js","mappings":"oQAaqBA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KA+FlB,OA/FkBA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACZC,OAAP,WAA4B,IAAD,OACzB,EAOIC,KAAKC,MANPC,EADF,EACEA,iBACAC,EAFF,EAEEA,gBACAC,EAHF,EAGEA,kBACAC,EAJF,EAIEA,iBACAC,EALF,EAKEA,mBACAC,EANF,EAMEA,QAGF,OACE,uBAAKC,UAAU,mBACb,uBAAKA,UAAU,0BACZN,EAAiBO,MACjBT,KAAKU,kBACJ,0BACEC,KAAK,SACL,aAAW,QACXC,QAAS,WACP,EAAKX,MAAMY,yBAGZC,EAAAA,IAKP,uBAAKN,UAAU,yBACb,uBACEA,UAAS,0BACPD,IAAYQ,EAAAA,GAAAA,YAA0B,kBAAoB,KAG5D,gBAAC,IAAD,CAAOC,MAAOd,EAAiBc,MAAOC,KAAMC,EAAAA,EAAAA,SAC5C,uBAAKV,UAAU,yBAAf,YAEF,uBACEA,UAAS,0BACPD,IAAYQ,EAAAA,GAAAA,cAA4B,kBAAoB,KAG9D,gBAAC,IAAD,CAAOC,MAAOZ,MAAAA,OAAF,EAAEA,EAAmBY,MAAOC,KAAMC,EAAAA,EAAAA,SAC9C,uBAAKV,UAAU,yBAAf,kBAEF,uBACEA,UAAS,0BACPD,IAAYQ,EAAAA,GAAAA,YAA0B,kBAAoB,KAG5D,gBAAC,IAAD,CAAOC,MAAOb,MAAAA,OAAF,EAAEA,EAAiBa,MAAOC,KAAMC,EAAAA,EAAAA,SAC5C,uBAAKV,UAAU,yBAAf,gBAEF,uBACEA,UAAS,0BACPD,IAAYQ,EAAAA,GAAAA,eAA6B,kBAAoB,KAG/D,gBAAC,IAAD,CAAOC,MAAOV,MAAAA,OAAF,EAAEA,EAAoBU,MAAOC,KAAMC,EAAAA,EAAAA,SAC/C,uBAAKV,UAAU,yBAAf,mBAEF,uBACEA,UAAS,0BACPD,IAAYQ,EAAAA,GAAAA,aAA2B,kBAAoB,KAG7D,gBAAC,IAAD,CAAOC,MAAOX,MAAAA,OAAF,EAAEA,EAAkBW,MAAOC,KAAMC,EAAAA,EAAAA,SAC7C,uBAAKV,UAAU,yBAAf,kBAIJ,uBACEA,UAAU,0BACVW,aAAc,WACZC,OAAOC,SAASC,KAAhB,WAAiCC,EAAAA,EAAAA,sBAC/BrB,EAAiBO,SAIrB,gBAAC,EAAAe,KAAD,CAAMC,GAAE,WAAYF,EAAAA,EAAAA,sBAAqBrB,EAAiBO,QAA1D,sBAEE,gBAAC,IAAD,CACEiB,MAAM,KACNC,QAAQ,YACRC,MAAO,CACL,CACEC,QAASC,EAAAA,EAAAA,eACTC,KAAM,eAQrB,EA/FkBjC,CAA+BkC,EAAAA,G,SCE/BC,EAAAA,SAAAA,GAInB,WAAmBC,GAAqC,IAAD,SACrD,cAAMA,IAAN,MAEKzB,MAAQ,GAHwC,GAJpCwB,EAAAA,EAAAA,GAAAA,EAAAA,GAQlB,kBA4JA,OA5JA,EAEOE,gBAAR,SACEC,EACAC,GAEA,OAAOD,EAAME,MAAK,SAACC,GAAD,OAAUA,EAAKF,OAASA,MAC3C,EAEOG,kBAAR,SACEC,EACAC,GAEA,IAC6BC,EAIzBF,EAJFG,iBAAoBR,MACKS,EAGvBJ,EAHFK,eAAkBV,MACUW,EAE1BN,EAFFO,kBAAqBZ,MACKa,EACxBR,EADFS,gBAAmBd,MAEbC,EAASK,EAATL,KACFjC,EAAsCJ,KAAKmC,gBAC/CQ,EACAN,GAEIlC,EAAoCH,KAAKmC,gBAC7CU,EACAR,GAEIhC,EAAqCL,KAAKmC,gBAC9Cc,EACAZ,GAEI/B,EAAuCN,KAAKmC,gBAChDY,EACAV,GAGFrC,KAAKmD,SAAS,CACZjD,iBAAkBwC,EAClBtC,kBAAAA,EACAE,mBAAAA,EACAD,iBAAAA,EACAF,gBAAAA,KAEH,EAEOU,qBAAR,WACEb,KAAKmD,SAAS,CACZjD,sBAAkBkD,KAErB,EAEMrD,OAAP,WAA4B,IAAD,OACzB,EAAqCC,KAAKC,MAAlCM,EAAR,EAAQA,QAASkC,EAAjB,EAAiBA,KAAMY,EAAvB,EAAuBA,UACvB,EAMIrD,KAAKS,MALPP,EADF,EACEA,iBACAC,EAFF,EAEEA,gBACAC,EAHF,EAGEA,kBACAC,EAJF,EAIEA,iBACAC,EALF,EAKEA,mBAGcgD,EAEZb,EAFFc,IAAOnB,MACPoB,EACEf,EADFe,YAGF,OACE,gBAAC,IAAD,CACEH,UAAWA,EACXI,YAAa,WACX,OAAOvD,EACL,gBAACJ,EAAD,CACEI,iBAAkBA,EAClBC,gBAAiBA,EACjBC,kBAAmBA,EACnBC,iBAAkBA,EAClBC,mBAAoBA,EACpBC,QAASA,EACTM,qBAAsB,WACpB,EAAKA,0BAIT,MAIH,qBAAG6C,YACUC,KAAI,SAACC,GAAS,IAAD,EACjBC,EAAsBP,EAAShB,MACnC,SAACwB,GAAD,OAAOA,EAAErD,QAAUmD,EAAI1B,WAAW6B,QAEpC,GAAIP,EACF,IAAIQ,EAAqBR,EAAYpB,MAAME,MACzC,SAACwB,GAAD,OAAOA,EAAErD,QAAUmD,EAAI1B,WAAW6B,aAGhCC,EAAqBV,EAAShB,MAChC,SAACwB,GAAD,OAAOA,EAAErD,QAAUmD,EAAI1B,WAAW6B,QAItC,OACE,gBAAC,EAAAE,SAAD,CAAUC,IAAKN,EAAIO,QACjB,gBAAC,EAAAC,UAAD,CACEC,UAAWT,EACXU,OAAO,OACPC,aAAc,SAACC,GACbnB,GACE,EAAKb,kBAAkBC,EAAMuB,GAClBQ,EAAMC,cAAcC,yBAEnCC,aAAc,WACZtB,GAAa,EAAKxC,wBAEpBD,QAAS,WACP,IAAK,EAAKF,iBAAkB,CAC1B,IAAQqD,EAASH,EAAI1B,WAAb6B,KACR3C,OAAOC,SAASC,KAAhB,WAAiCC,EAAAA,EAAAA,sBAC/BwC,GADF,KAGExD,IAAYQ,EAAAA,GAAAA,YACR,UACAR,EAAQqE,uBAIlBzD,aAAc,SAAC0D,GACb,EAAKrC,kBAAkBC,EAAMuB,IAE/Bc,MAAO,CACLC,QAAS,CACPhD,KAAI,UAAEiD,EAAAA,EAAcnB,MAAAA,OAAD,EAACA,EAAqB7C,cAArC,QAA+C,OACnDiE,QAAS,QAEXC,MAAO,CACLnD,KAAM,UACNkD,QAAS,OACTE,OAAQ,UACRC,YAAa,EACbC,QAAS,EACTC,SAAU,WACVC,OAAQ,GAEVC,QAAS,CACPzD,KAAM,OACNkD,QAAS,mBAU5B,EApKkBhD,CAAoBD,EAAAA,I,kCCflC,IAAKd,E,gCAAZ,SAAYA,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,SAAAA,EAAAA,MAAAA,QAAZ,CAAYA,IAAAA,EAAAA,M,6GCMSuE,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KAgBlB,OAhBkBA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACZ1F,OAAP,WACE,MAAwBC,KAAKC,MAArBe,EAAR,EAAQA,MACF0E,EAAa,YADnB,EAAezE,KAET0E,EAAa,WAAcD,EAC3BE,EAAqBF,EAAN,WACrB,OACE,uBACElF,UAAWmF,EACXb,MAAO,CACLe,gBAAiBb,EAAAA,EAAchE,KAGjC,uBAAKR,UAAWoF,GAAkB5E,KAGvC,EAhBkByE,CAAczD,EAAAA,I,yICFd8D,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KASlB,OATkBA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACZ/F,OAAP,WACE,MAAmDC,KAAKC,MAAhD8F,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAAcC,GAAhC,YAEA,OACE,qCAAK,UAAQ,QAAQ,YAAWD,GAAeC,GAC5CF,IAGN,EATkBD,CAAuB9D,EAAAA,I,kCCJrC,IAAKkE,E,gCAAZ,SAAYA,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,OAAAA,SAAZ,CAAYA,IAAAA,EAAAA,M,wHCMSC,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UA+ClB,OA/CkBA,EACZpG,OAAP,WACE,MAA4DC,KAAKC,MAAzDmG,EAAR,EAAQA,MAAOC,EAAf,EAAeA,YAAaC,EAA5B,EAA4BA,sBAAuB3F,EAAnD,EAAmDA,KAC7C4F,EAAgCvG,KAAKwG,mBAAX,IAAiCF,EAEjE,OACE,gBAAC,IAAD,CACEG,KAAM,CACJ,CACEC,SAAU,WACVC,QAASP,GAEX,CACEM,SAAU,UACVC,QAAST,EAAAA,EAAAA,QAEX,CACEQ,SAAU,iBACVC,QAASN,GAEX,CACEK,SAAU,WACVC,QAASJ,GAEX,CACExC,KAAM,eACN4C,QAAShG,GAEX,CACEoD,KAAM,gBACN4C,QAASP,GAEX,CACErC,KAAM,oBACN4C,QAASJ,GAEX,CACExC,KAAM,sBACN4C,QAASN,OAKlB,EAESG,iBAAV,WACE,MAAUI,sBACX,EA/CkBT,CAAuBnE,EAAAA,I,kCCNrC,IAAK6E,EAgBAC,EAMAC,EASAhG,EAQAiG,E,iIAvCZ,SAAYH,GAAAA,EAAAA,0BAAAA,iBAAAA,EAAAA,8BAAAA,oBAAAA,EAAAA,gCAAAA,sBAAAA,EAAAA,8BAAAA,oBAAAA,EAAAA,+BAAAA,UAAAA,EAAAA,+BAAAA,UAAAA,EAAAA,mBAAAA,QAAAA,EAAAA,oBAAAA,SAAAA,EAAAA,mBAAAA,MAAAA,EAAAA,oBAAAA,OAAAA,EAAAA,yBAAAA,WAAAA,EAAAA,sBAAAA,SAAAA,EAAAA,MAAAA,QAAZ,CAAYA,IAAAA,EAAAA,KAgBZ,SAAYC,GAAAA,EAAAA,sBAAAA,SAAAA,EAAAA,0BAAAA,aAAAA,EAAAA,2BAAAA,cAAZ,CAAYA,IAAAA,EAAAA,KAMZ,SAAYC,GAAAA,EAAAA,UAAAA,OAAAA,EAAAA,UAAAA,OAAAA,EAAAA,UAAAA,OAAAA,EAAAA,UAAAA,OAAAA,EAAAA,UAAAA,OAAAA,EAAAA,QAAAA,UAAZ,CAAYA,IAAAA,EAAAA,KASZ,SAAYhG,GAAAA,EAAAA,YAAAA,cAAAA,EAAAA,eAAAA,iBAAAA,EAAAA,cAAAA,gBAAAA,EAAAA,aAAAA,eAAAA,EAAAA,YAAAA,aAAZ,CAAYA,IAAAA,EAAAA,KAQZ,SAAYiG,GAAAA,EAAAA,aAAAA,KAAAA,EAAAA,QAAAA,IAAAA,EAAAA,cAAAA,KAAAA,EAAAA,aAAAA,KAAAA,EAAAA,QAAAA,IAAAA,EAAAA,cAAAA,KAAAA,EAAAA,aAAAA,KAAAA,EAAAA,QAAAA,IAAAA,EAAAA,cAAAA,KAAAA,EAAAA,aAAAA,KAAAA,EAAAA,QAAAA,IAAAA,EAAAA,cAAAA,KAAAA,EAAAA,aAAAA,KAAAA,EAAAA,QAAAA,IAAAA,EAAAA,cAAAA,KAAAA,EAAAA,SAAAA,KAAZ,CAAYA,IAAAA,EAAAA,M,qNCzBSC,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAoDlB,OApDkBA,EACTC,2BAAV,WACE,MAAO,sBACR,EAEMnH,OAAP,WACE,IAAQ0C,EAASzC,KAAKC,MAAdwC,KAER,OACE,gBAAC,EAAAwB,SAAD,KACE,gBAAC,IAAD,CACEtD,KAAMuF,EAAAA,EAAAA,QACNE,MAAOpG,KAAKmH,UAAU,SACtBd,YAAarG,KAAKmH,UAAU,eAC5Bb,sBAAsB,6BAExB,gBAAC,IAAD,CAAc9F,UAAU,oBACtB,gBAAC,IAAD,CAAgBA,UAAU,gBAAgBwF,UAAU,eAClD,uBAAKxF,UAAU,gBACb,sBAAIA,UAAU,kBAAkBR,KAAKmH,UAAU,UAC/C,gBAAC,IAAD,CAAa1E,KAAMA,EAAMlC,QAASQ,EAAAA,GAAAA,eAEpC,uBAAKP,UAAU,iBACb,gBAAC,EAAAgB,KAAD,CAAMC,GAAI2F,EAAAA,EAAAA,MACR,gBAAC,IAAD,CACE1F,MAAM,MACNC,QAAQ,aACRC,MAAO,CACL,CACEC,QAASC,EAAAA,EAAAA,mBACTC,KAAM,WAER,CACEsF,SAAU,UACVC,SAAU,UACVzF,QAASC,EAAAA,EAAAA,UACTC,KAAM,WAER,CACEsF,SAAU,UACVC,SAAU,UACVzF,QAASC,EAAAA,EAAAA,UACTC,KAAM,oBAUzB,EApDkBkF,CAA2BjF,EAAAA,I,iBCVhDuF,EAAOC,QAAU,CACfjG,qBALF,SAA8BkG,GAC5B,OAAOA,EAAUC,cAAcC,QAAQ,IAAK,Q,kCCD/B,SAASC,EAAgBC,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qC,mECFxB,SAASC,EAAkBC,EAAQhI,GACjC,IAAK,IAAIiI,EAAI,EAAGA,EAAIjI,EAAMkI,OAAQD,IAAK,CACrC,IAAIE,EAAanI,EAAMiI,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWlE,IAAKkE,IAInC,SAASM,EAAaZ,EAAaa,EAAYC,GAG5D,OAFID,GAAYX,EAAkBF,EAAYe,UAAWF,GACrDC,GAAaZ,EAAkBF,EAAac,GACzCd,E,mECbM,SAASgB,EAAgBC,EAAK7E,EAAK8E,GAYhD,OAXI9E,KAAO6E,EACTP,OAAOC,eAAeM,EAAK7E,EAAK,CAC9B8E,MAAOA,EACPX,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZQ,EAAI7E,GAAO8E,EAGND,E,mECZM,SAASE,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIhF,EAAKgE,EAFLD,EAAS,GACTmB,EAAaZ,OAAOa,KAAKH,GAG7B,IAAKhB,EAAI,EAAGA,EAAIkB,EAAWjB,OAAQD,IACjChE,EAAMkF,EAAWlB,GACbiB,EAASG,QAAQpF,IAAQ,IAC7B+D,EAAO/D,GAAOgF,EAAOhF,IAGvB,OAAO+D,E","sources":["webpack://sod/./src/components/charts/map/sod/tooltip-body/sod-map-chart-tooltip-body.tsx","webpack://sod/./src/components/charts/map/sod/sod-map-chart.tsx","webpack://sod/./src/components/grade/grade-enum.tsx","webpack://sod/./src/components/grade/grade.tsx","webpack://sod/./src/components/share-container/share-container.tsx","webpack://sod/./src/components/social-metadata/social-metadata-enum.tsx","webpack://sod/./src/components/social-metadata/social-metadata.tsx","webpack://sod/./src/global/global-enum.tsx","webpack://sod/./src/templates/embedded/overall-map/overall-map.tsx","webpack://sod/./utils.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import { Link } from 'gatsby';\nimport React, { Fragment, ReactNode } from 'react';\nimport { generateUrlForStates } from '../../../../../../utils';\nimport BaseComponent from '../../../../../base/base-component';\nimport { SODMeasures } from '../../../../../global/global-enum';\nimport { closeSVG } from '../../../../../global/svg/close';\nimport Grade from '../../../../grade/grade';\nimport { GradeSize } from '../../../../grade/grade-enum';\nimport SvgIcon from '../../../../svg-icon/svg-icon';\nimport { SvgIconPathCommand } from '../../../../svg-icon/svg-icon-enum';\nimport { ISODMapChartTooltipBodyProperties } from './sod-map-chart-tooltip-body-interface';\nimport './sod-map-chart-tooltip-body.scss';\n\nexport default class SODMapChartTooltipBody extends BaseComponent<ISODMapChartTooltipBodyProperties> {\n  public render(): ReactNode {\n    const {\n      currentStateData,\n      competitionData,\n      participationData,\n      polarizationData,\n      representationData,\n      measure,\n    } = this.props;\n\n    return (\n      <div className=\"sod-map-tooltip\">\n        <div className=\"sod-map-tooltip__title\">\n          {currentStateData.state}\n          {this.isMobileDevice() && (\n            <button\n              type=\"button\"\n              aria-label=\"Close\"\n              onClick={(): void => {\n                this.props.removeTooltipContent();\n              }}\n            >\n              {closeSVG}\n            </button>\n          )}\n        </div>\n\n        <div className=\"sod-map-tooltip__body\">\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.GRAND_TOTAL ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={currentStateData.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Overall</div>\n          </div>\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.PARTICIPATION ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={participationData?.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Participation</div>\n          </div>\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.COMPETITION ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={competitionData?.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Competition</div>\n          </div>\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.REPRESENTATION ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={representationData?.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Representation</div>\n          </div>\n          <div\n            className={`sod-map-tooltip__grade${\n              measure === SODMeasures.POLARIZATION ? ' grade--overall' : ''\n            }`}\n          >\n            <Grade grade={polarizationData?.grade} size={GradeSize.MEDIUM} />\n            <div className=\"sod-map-tooltip__text\">Polarization</div>\n          </div>\n        </div>\n\n        <div\n          className=\"sod-map-tooltip__footer\"\n          onTouchStart={(): void => {\n            window.location.href = `/state/${generateUrlForStates(\n              currentStateData.state\n            )}`;\n          }}\n        >\n          <Link to={`/state/${generateUrlForStates(currentStateData.state)}`}>\n            Click to learn more\n            <SvgIcon\n              width=\"14\"\n              viewBox=\"0 0 14 10\"\n              paths={[\n                {\n                  command: SvgIconPathCommand.M9_ARROW_RIGHT,\n                  fill: '#000',\n                },\n              ]}\n            />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Fragment, ReactChild, ReactNode } from 'react';\nimport { Geography } from 'react-simple-maps';\nimport { generateUrlForStates } from '../../../../../utils';\nimport BaseComponent from '../../../../base/base-component';\nimport { SODMeasures } from '../../../../global/global-enum';\nimport { SODGradeColor } from '../../../../global/grade-color-enum';\nimport { ICriteriaData } from '../../../../templates/criteria/criteria-interface';\nimport {\n  ISODMapChartData,\n  ISODMapChartProperties,\n  ISODMapChartState,\n} from './sod-map-chart-interface';\nimport SODMapChartTooltipBody from './tooltip-body/sod-map-chart-tooltip-body';\nimport MapChart from '../map-chart';\n\nexport default class SODMapChart extends BaseComponent<\n  ISODMapChartProperties,\n  ISODMapChartState\n> {\n  public constructor(properties: ISODMapChartProperties) {\n    super(properties);\n\n    this.state = {};\n  }\n\n  private findTooltipData(\n    nodes: ISODMapChartData[],\n    code: string\n  ): ISODMapChartData {\n    return nodes.find((node) => node.code === code);\n  }\n\n  private setTooltipContent(\n    data: ICriteriaData,\n    currentState: ISODMapChartData\n  ): void {\n    const {\n      allParticipation: { nodes: allParticipationNodes },\n      allCompetition: { nodes: allCompetitionNodes },\n      allRepresentation: { nodes: allRepresentationNodes },\n      allPolarization: { nodes: allPolarizationNodes },\n    } = data;\n    const { code } = currentState;\n    const participationData: ISODMapChartData = this.findTooltipData(\n      allParticipationNodes,\n      code\n    );\n    const competitionData: ISODMapChartData = this.findTooltipData(\n      allCompetitionNodes,\n      code\n    );\n    const polarizationData: ISODMapChartData = this.findTooltipData(\n      allPolarizationNodes,\n      code\n    );\n    const representationData: ISODMapChartData = this.findTooltipData(\n      allRepresentationNodes,\n      code\n    );\n\n    this.setState({\n      currentStateData: currentState,\n      participationData,\n      representationData,\n      polarizationData,\n      competitionData,\n    });\n  }\n\n  private removeTooltipContent(): void {\n    this.setState({\n      currentStateData: undefined,\n    });\n  }\n\n  public render(): ReactNode {\n    const { measure, data, isTooltip } = this.props;\n    const {\n      currentStateData,\n      competitionData,\n      participationData,\n      polarizationData,\n      representationData,\n    } = this.state;\n    const {\n      all: { nodes: allNodes },\n      overallData,\n    } = data;\n\n    return (\n      <MapChart\n        isTooltip={isTooltip}\n        tooltipBody={(): ReactChild => {\n          return currentStateData ? (\n            <SODMapChartTooltipBody\n              currentStateData={currentStateData}\n              competitionData={competitionData}\n              participationData={participationData}\n              polarizationData={polarizationData}\n              representationData={representationData}\n              measure={measure}\n              removeTooltipContent={(): void => {\n                this.removeTooltipContent();\n              }}\n            />\n          ) : (\n            ''\n          );\n        }}\n      >\n        {({ geographies }) =>\n          geographies.map((geo) => {\n            const currentOverallState = allNodes.find(\n              (s) => s.state === geo.properties.name\n            );\n            if (overallData) {\n              var currentOverallData = overallData.nodes.find(\n                (s) => s.state === geo.properties.name\n              );\n            } else {\n              var currentOverallData = allNodes.find(\n                (s) => s.state === geo.properties.name\n              );\n            }\n\n            return (\n              <Fragment key={geo.rsmKey}>\n                <Geography\n                  geography={geo}\n                  stroke=\"#fff\"\n                  onMouseEnter={(event): void => {\n                    isTooltip &&\n                      this.setTooltipContent(data, currentOverallData);\n                    const rect = event.currentTarget.getBoundingClientRect();\n                  }}\n                  onMouseLeave={(): void => {\n                    isTooltip && this.removeTooltipContent();\n                  }}\n                  onClick={(): void => {\n                    if (!this.isMobileDevice()) {\n                      const { name } = geo.properties;\n                      window.location.href = `/state/${generateUrlForStates(\n                        name\n                      )}/${\n                        measure === SODMeasures.GRAND_TOTAL\n                          ? 'overall'\n                          : measure.toLocaleLowerCase()\n                      }`;\n                    }\n                  }}\n                  onTouchStart={(ev): void => {\n                    this.setTooltipContent(data, currentOverallData);\n                  }}\n                  style={{\n                    default: {\n                      fill: SODGradeColor[currentOverallState?.grade] ?? '#eee',\n                      outline: 'none',\n                    },\n                    hover: {\n                      fill: 'current',\n                      outline: 'none',\n                      cursor: 'pointer',\n                      strokeWidth: 2,\n                      opacity: 1,\n                      position: 'relative',\n                      zIndex: 9,\n                    },\n                    pressed: {\n                      fill: '#E42',\n                      outline: 'none',\n                    },\n                  }}\n                />\n              </Fragment>\n            );\n          })\n        }\n      </MapChart>\n    );\n  }\n}\n","export enum GradeSize {\n  SMALL = \"small\",\n  MEDIUM = \"medium\",\n  LARGE = \"large\",\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport { SODGradeColor } from '../../global/grade-color-enum';\nimport { IGrade } from './grade-interface';\nimport './grade.scss';\n\nexport default class Grade extends BaseComponent<IGrade> {\n  public render(): ReactNode {\n    const { grade, size } = this.props;\n    const sizeClassName = `c-grade--${size}`;\n    const rootClassName = `c-grade ${sizeClassName}`;\n    const symbolClassName = `${sizeClassName}__symbol`;\n    return (\n      <div\n        className={rootClassName}\n        style={{\n          backgroundColor: SODGradeColor[grade],\n        }}\n      >\n        <div className={symbolClassName}>{grade}</div>\n      </div>\n    );\n  }\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport { IShareContainerProperties } from './share-container-interface';\n\nexport default class ShareContainer extends BaseComponent<IShareContainerProperties> {\n  public render(): ReactNode {\n    const { children, shareName, ...restProperties } = this.props;\n\n    return (\n      <div data-id=\"share\" data-name={shareName} {...restProperties}>\n        {children}\n      </div>\n    );\n  }\n}\n","export enum SocialMetadataType {\n  SUMMARY = 'summary',\n  SUMMARY_LARGE_IMAGE = 'summary_large_image',\n  OBJECT = 'object',\n}\n","import React, { ReactNode } from 'react';\nimport { Helmet } from 'react-helmet';\nimport BaseComponent from '../../base/base-component';\nimport { SocialMetadataType } from './social-metadata-enum';\nimport { ISocialMetadataProperties } from './social-metadata-interface';\n\nexport default class SocialMetadata extends BaseComponent<ISocialMetadataProperties> {\n  public render(): ReactNode {\n    const { title, description, imageResourceFileName, type } = this.props;\n    const imageSourceContent: string = `${this.getResourcesPath()}/${imageResourceFileName}`;\n\n    return (\n      <Helmet\n        meta={[\n          {\n            property: 'og:title',\n            content: title,\n          },\n          {\n            property: 'og:type',\n            content: SocialMetadataType.OBJECT,\n          },\n          {\n            property: 'og:description',\n            content: description,\n          },\n          {\n            property: 'og:image',\n            content: imageSourceContent,\n          },\n          {\n            name: 'twitter:card',\n            content: type,\n          },\n          {\n            name: 'twitter:title',\n            content: title,\n          },\n          {\n            name: 'twitter:image:src',\n            content: imageSourceContent,\n          },\n          {\n            name: 'twitter:description',\n            content: description,\n          },\n        ]}\n      />\n    );\n  }\n\n  protected getResourcesPath(): string {\n    return `${process.env.SITE_URL}`;\n  }\n}\n","export enum SODComponents {\n  COMPETITION_WINNERS_SHARE = \"Winner's Share\",\n  COMPETITION_MARGIN_OF_VICTORY = \"Margin of Victory\",\n  COMPETITION_UNCOMPETITIVE_SEATS = \"Uncompetetive Seats\",\n  COMPETITION_UNCONTESTED_RACES = \"Uncontested Races\",\n  PARTICIPATION_PRIMARY_ELECTION = \"Primary\",\n  PARTICIPATION_GENERAL_ELECTION = \"General\",\n  POLARIZATION_HOUSE = \"House\",\n  POLARIZATION_SENATE = \"Senate\",\n  REPRESENTATION_SEX = \"Sex\",\n  REPRESENTATION_RACE = \"Race\",\n  REPRESENTATION_NON_WHITE = \"NonWhite\",\n  REPRESENTATION_FEMALE = \"Female\",\n  TOTAL = \"Total\",\n}\n\nexport enum SODSubComponents {\n  REPRESENTATION_PARITY = \"Parity\",\n  REPRESENTATION_POPULATION = \"Population\",\n  REPRESENTATION_LEGISLATURE = \"Legislature\",\n}\n\nexport enum SODCycles {\n  YEAR_2012 = \"2012\",\n  YEAR_2014 = \"2014\",\n  YEAR_2016 = \"2016\",\n  YEAR_2018 = \"2018\",\n  YEAR_2020 = \"2020\",\n  OVERALL = \"Overall\",\n}\n\nexport enum SODMeasures {\n  COMPETITION = \"Competition\",\n  REPRESENTATION = \"Representation\",\n  PARTICIPATION = \"Participation\",\n  POLARIZATION = \"Polarization\",\n  GRAND_TOTAL = \"GrandTotal\",\n}\n\nexport enum SODGrade {\n  GRADE_A_PLUS = \"A+\",\n  GRADE_A = \"A\",\n  GRADE_A_MINUS = \"A-\",\n  GRADE_B_PLUS = \"B+\",\n  GRADE_B = \"B\",\n  GRADE_B_MINUS = \"B-\",\n  GRADE_C_PLUS = \"C+\",\n  GRADE_C = \"C\",\n  GRADE_C_MINUS = \"C-\",\n  GRADE_D_PLUS = \"D+\",\n  GRADE_D = \"D\",\n  GRADE_D_MINUS = \"D-\",\n  GRADE_F_PLUS = \"F+\",\n  GRADE_F = \"F\",\n  GRADE_F_MINUS = \"F-\",\n  GRADE_NA = \"NA\",\n}\n","import { graphql, Link } from \"gatsby\";\nimport React, { Fragment, ReactNode } from \"react\";\nimport BaseComponent from \"../../../base/base-component\";\nimport { Route } from \"../../../global/route-enum\";\nimport { IEmbeddedOverallMapProperties } from \"./overall-map-interface\";\nimport ContainerBox from \"../../../components/container-box/container-box\";\nimport ShareContainer from \"../../../components/share-container/share-container\";\nimport SocialMetadata from \"../../../components/social-metadata/social-metadata\";\nimport { SocialMetadataType } from \"../../../components/social-metadata/social-metadata-enum\";\nimport SvgIcon from \"../../../components/svg-icon/svg-icon\";\nimport { SvgIconPathCommand } from \"../../../components/svg-icon/svg-icon-enum\";\nimport { SODMeasures } from \"../../../global/global-enum\";\nimport SODMapChart from \"../../../components/charts/map/sod/sod-map-chart\";\n\nexport default class EmbeddedOverallMap extends BaseComponent<IEmbeddedOverallMapProperties> {\n  protected declareTranslateCollection(): string {\n    return \"overallMapTemplate\";\n  }\n\n  public render(): ReactNode {\n    const { data } = this.props;\n\n    return (\n      <Fragment>\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={this.translate(\"title\")}\n          description={this.translate(\"description\")}\n          imageResourceFileName=\"embedded-overall-map.png\"\n        />\n        <ContainerBox className=\"c-section--embed\">\n          <ShareContainer className=\"c-embed__wrap\" shareName=\"overall-map\">\n            <div className=\"c-embed__box\">\n              <h2 className=\"c-score__title\">{this.translate(\"title\")}</h2>\n              <SODMapChart data={data} measure={SODMeasures.GRAND_TOTAL} />\n            </div>\n            <div className=\"c-embed__logo\">\n              <Link to={Route.HOME}>\n                <SvgIcon\n                  width=\"111\"\n                  viewBox=\"0 0 208 44\"\n                  paths={[\n                    {\n                      command: SvgIconPathCommand.STATE_OF_DEMOCRACY,\n                      fill: \"#0D0C0D\",\n                    },\n                    {\n                      fillRule: \"evenodd\",\n                      clipRule: \"evenodd\",\n                      command: SvgIconPathCommand.LOGO_EAST,\n                      fill: \"#C7AFF0\",\n                    },\n                    {\n                      fillRule: \"evenodd\",\n                      clipRule: \"evenodd\",\n                      command: SvgIconPathCommand.LOGO_WEST,\n                      fill: \"#4A1D96\",\n                    },\n                  ]}\n                />\n              </Link>\n            </div>\n          </ShareContainer>\n        </ContainerBox>\n      </Fragment>\n    );\n  }\n}\n\nexport const query = graphql`\n  query GetEmbeddedMapOverallData {\n    all: allSheetDataGrandTotal {\n      nodes {\n        code\n        state\n        grade\n      }\n    }\n  }\n`;\n","function generateUrlForStates(stateName) {\n  return stateName.toLowerCase().replace(\" \", \"-\");\n}\n\nmodule.exports = {\n  generateUrlForStates,\n};\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["SODMapChartTooltipBody","render","this","props","currentStateData","competitionData","participationData","polarizationData","representationData","measure","className","state","isMobileDevice","type","onClick","removeTooltipContent","closeSVG","SODMeasures","grade","size","GradeSize","onTouchStart","window","location","href","generateUrlForStates","Link","to","width","viewBox","paths","command","SvgIconPathCommand","fill","BaseComponent","SODMapChart","properties","findTooltipData","nodes","code","find","node","setTooltipContent","data","currentState","allParticipationNodes","allParticipation","allCompetitionNodes","allCompetition","allRepresentationNodes","allRepresentation","allPolarizationNodes","allPolarization","setState","undefined","isTooltip","allNodes","all","overallData","tooltipBody","geographies","map","geo","currentOverallState","s","name","currentOverallData","Fragment","key","rsmKey","Geography","geography","stroke","onMouseEnter","event","currentTarget","getBoundingClientRect","onMouseLeave","toLocaleLowerCase","ev","style","default","SODGradeColor","outline","hover","cursor","strokeWidth","opacity","position","zIndex","pressed","Grade","sizeClassName","rootClassName","symbolClassName","backgroundColor","ShareContainer","children","shareName","restProperties","SocialMetadataType","SocialMetadata","title","description","imageResourceFileName","imageSourceContent","getResourcesPath","meta","property","content","process","SODComponents","SODSubComponents","SODCycles","SODGrade","EmbeddedOverallMap","declareTranslateCollection","translate","Route","fillRule","clipRule","module","exports","stateName","toLowerCase","replace","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","_objectWithoutPropertiesLoose","source","excluded","sourceKeys","keys","indexOf"],"sourceRoot":""}