{"version":3,"file":"component---src-templates-embedded-representation-state-score-representation-state-score-tsx-ecd75c1b40dbd5199f3c.js","mappings":"wMAUqBA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UA4FlB,OA5FkBA,EACTC,2BAAV,WACE,MAAO,iBACR,EAEMC,OAAP,WACE,MAWIC,KAAKC,MAXT,IACEC,aAAAA,OADF,MACiB,CAAC,eADlB,EAEEC,EAFF,EAEEA,aACAC,EAHF,EAGEA,eACAC,EAJF,EAIEA,YACAC,EALF,EAKEA,aACAC,EANF,EAMEA,kBACAC,EAPF,EAOEA,aACAC,EARF,EAQEA,MACAC,EATF,EASEA,UATF,IAUEC,WAAAA,OAVF,SAYMC,EAAuB,CAC3B,kCACAD,EAAa,YAAc,IAC3BE,KAAK,KACDC,EAAuCT,EAAYU,KACvD,SAACC,GACC,MAAO,CACLC,MAAOD,EAAKC,MACZC,MAAOF,EAAKE,MACZC,OAAQH,EAAKG,WAKnB,OACE,uBAAKC,UAAU,oBACb,sBAAIA,UAAU,kBAAkBX,GAChC,uBAAKW,UAAWR,GACd,uBAAKQ,UAAU,kCACb,uBAAKA,UAAU,0BACb,gBAAC,IAAD,CAAOC,MAAOf,EAAcgB,KAAMC,EAAAA,EAAAA,QAClC,uBAAKH,UAAU,oBACb,wBAAMA,UAAU,6BACbZ,GAEH,wBAAMY,UAAU,6BACVpB,KAAKwB,UAAU,OADrB,IAC+BrB,MAKrC,uBAAKiB,UAAU,8CACb,uBAAK,YAAU,QAAQA,UAAU,2BAC/B,gBAAC,IAAD,CACEd,aAAcA,EACdmB,YAAaX,QAKnBH,GACA,uBAAKS,UAAU,mDACb,uBAAKA,UAAU,kCACb,uBAAKA,UAAU,0BACb,gBAAC,IAAD,CACEM,SAAUnB,EACVG,UAAWA,IAEb,uBAAKU,UAAU,oBACb,wBAAMA,UAAU,6BACbpB,KAAKwB,UAAU,aAElB,wBAAMJ,UAAU,6BACVpB,KAAKwB,UAAU,OADrB,IAC+BpB,GAC3BM,EAAY,IAAM,UAM5B,uBAAKU,UAAU,8CACZlB,EAAaa,KAAI,SAACY,GACjB,OACE,gCACE,qBAAGP,UAAU,0BAA0BO,GACvC,mCASjB,EA5FkB9B,CAAsB+B,EAAAA,I,6ECLtBC,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KAWlB,OAXkBA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACZ9B,OAAP,WACE,MAAwCC,KAAKC,MAArCyB,EAAR,EAAQA,SAAR,IAAkBhB,UAAAA,OAAlB,SAEA,OACE,uBAAKU,UAAU,iBACb,uBAAKA,UAAU,0BACTM,GAAWhB,EAAY,IAAM,QAIxC,EAXkBmB,C,QAAmBD,I,4HCDnBE,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KASlB,OATkBA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACZ/B,OAAP,WACE,MAAmDC,KAAKC,MAAhD8B,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAAcC,GAAhC,YAEA,OACE,qCAAK,UAAQ,QAAQ,YAAWD,GAAeC,GAC5CF,IAGN,EATkBD,CAAuBF,EAAAA,I,kNCkBvBM,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UA6HlB,OA7HkBA,EACTpC,2BAAV,WACE,MAAO,+BACR,EAEMC,OAAP,WACE,IAAQoC,EAAwBnC,KAAKC,MAAMmC,KAAnCD,oBAEOE,EAAiBrC,KAAKsC,oBACnCC,EAAAA,GAAAA,OADMC,MAGR,EAKIxC,KAAKyC,oBAAoBF,EAAAA,GAAAA,OAJ3BG,EADF,EACEA,MACOC,EAFT,EAEEH,MACAnB,EAHF,EAGEA,MACAH,EAJF,EAIEA,MAEI0B,EACJT,EAAoBU,MAAM9B,KAAI,SAAC+B,GAC7B,IAAQ7B,EAAyB6B,EAAzB7B,MAAOC,EAAkB4B,EAAlB5B,MAAOC,EAAW2B,EAAX3B,OACtB,MAAO,CACLF,MAAAA,EACAC,MAAO6B,KAAKC,MAAc,IAAR9B,GAClBC,OAAAA,MAIN,OACE,gBAAC,EAAA8B,SAAD,KACE,gBAAC,IAAD,CACEC,KAAMC,EAAAA,EAAAA,QACN1C,MAAUiC,EAAL,IAAc1C,KAAKwB,UAAU,cAClC4B,YAAapD,KAAKwB,UAAU,yBAC5B6B,sBAAqB,kCAAmCC,EAAAA,EAAAA,sBACtDZ,GADmB,SAIvB,gBAAC,IAAD,CAActB,UAAU,oBACtB,gBAAC,IAAD,CACEA,UAAU,gBACVY,UAAS,yBAA0BsB,EAAAA,EAAAA,sBAAqBZ,IAExD,uBAAKtB,UAAU,gBACb,uBAAKA,UAAU,kBAAkBsB,GACjC,gBAAC,IAAD,CACEjC,MAAOT,KAAKwB,UAAU,cACtBrB,aAAc4C,KAAKC,MAAqB,IAAfX,GACzBjC,eAAgB2C,KAAKC,MAAqB,IAAfX,GAC3B9B,kBAAmBwC,KAAKC,MAAqB,IAAfL,GAC9BtC,YAAauC,EACbtC,aAAce,EACdb,aAAcuC,KAAKC,MAAc,IAAR9B,GACzBhB,aAAc,CACZF,KAAKwB,UAAU,yBACfxB,KAAKwB,UAAU,8BAIrB,uBAAKJ,UAAU,iBACb,gBAAC,EAAAmC,KAAD,CAAMC,GAAIC,EAAAA,EAAAA,MACR,gBAAC,IAAD,CACEC,MAAM,MACNC,QAAQ,aACRC,MAAO,CACL,CACEC,QAASC,EAAAA,EAAAA,mBACTC,KAAM,WAER,CACEC,SAAU,UACVC,SAAU,UACVJ,QAASC,EAAAA,EAAAA,UACTC,KAAM,WAER,CACEC,SAAU,UACVC,SAAU,UACVJ,QAASC,EAAAA,EAAAA,UACTC,KAAM,oBAUzB,EAEOtB,oBAAR,SAA4ByB,GAAqC,IAAD,EAgB9D,OAdgC,UADZlE,KAAKC,MAAMmC,KAAvB+B,QACmCtB,MAAMuB,MAAK,SAACtB,GACrD,OAAOA,EAAKoB,YAAcA,YADI,QAE1B,CACJG,KAAM,KACNH,UAAAA,EACAjD,MAAOqD,EAAAA,GAAAA,QACPjD,MAAOkD,EAAAA,GAAAA,SACPC,QAASC,EAAAA,GAAAA,cACTvD,OAAQ,EACRwB,MAAO,KACPF,OAAQ,EACRrB,QAAS,IAIZ,EAEOmB,oBAAR,SAA4B4B,GAAqC,IAAD,EAe9D,OAbgC,UADZlE,KAAKC,MAAMmC,KAAvBsC,QACmC7B,MAAMuB,MAAK,SAACtB,GACrD,OAAOA,EAAKoB,YAAcA,YADI,QAE1B,CACJG,KAAM,KACNH,UAAAA,EACAjD,MAAOqD,EAAAA,GAAAA,QACPjD,MAAOkD,EAAAA,GAAAA,SACPC,QAASC,EAAAA,GAAAA,cACTvD,OAAQ,EACRwB,MAAO,KACPF,OAAQ,EACRrB,QAAS,IAGZ,EA7HkBe,CAAyCN,EAAAA,I,qBCtB/C,SAAS+C,EAAuBC,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,E,sDCLM,SAASE,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://sod/./src/components/criteria-grade/criteria-grade.tsx","webpack://sod/./src/components/percent-box/percent-box.tsx","webpack://sod/./src/components/share-container/share-container.tsx","webpack://sod/./src/templates/embedded/representation-state-score/representation-state-score.tsx","webpack://sod/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://sod/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport CycleScoreChart from '../charts/cycle-score/cycle-score';\nimport { ICycleScoreChartPoint } from '../charts/cycle-score/cycle-score-interface';\nimport Grade from '../grade/grade';\nimport { GradeSize } from '../grade/grade-enum';\nimport PercentBox from '../percent-box/percent-box';\nimport { ICriteriaGradeProperties } from './criteria-grade-interface';\nimport './criteria-grade.scss';\n\nexport default class CriteriaGrade extends BaseComponent<ICriteriaGradeProperties> {\n  protected declareTranslateCollection(): string | undefined {\n    return 'criteriaGrade';\n  }\n\n  public render(): ReactNode {\n    const {\n      descriptions = ['description'],\n      averageScore,\n      averagePercent,\n      cycleScores,\n      overallGrade,\n      overallPercentage,\n      overallScore,\n      title,\n      isDecimal,\n      simpleMode = false,\n    } = this.props;\n    const rowClassName: string = [\n      'row c-criteria-grade__container',\n      simpleMode ? 'is-simple' : '',\n    ].join(' ');\n    const chartScores: ICycleScoreChartPoint[] = cycleScores.map(\n      (item): ICycleScoreChartPoint => {\n        return {\n          cycle: item.cycle,\n          score: item.score,\n          weight: item.weight,\n        };\n      }\n    );\n\n    return (\n      <div className=\"c-criteria-grade\">\n        <h3 className=\"c-score__title\">{title}</h3>\n        <div className={rowClassName}>\n          <div className=\"col-md-4 c-criteria-grade__col\">\n            <div className=\"c-criteria-grade__wrap\">\n              <Grade grade={overallGrade} size={GradeSize.LARGE} />\n              <div className=\"c-criteria__info\">\n                <span className=\"c-criteria-grade__overall\">\n                  {overallScore}\n                </span>\n                <span className=\"c-criteria-grade__average\">\n                  {`${this.translate('avg')}:${averageScore}`}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-7 offset-md-1 c-criteria-grade__col\">\n            <div data-name=\"chart\" className=\"c-criteria-grade__chart\">\n              <CycleScoreChart\n                overallGrade={overallGrade}\n                chartPoints={chartScores}\n              />\n            </div>\n          </div>\n        </div>\n        {!simpleMode && (\n          <div className=\"row c-criteria-grade__container c-criteria--raw\">\n            <div className=\"col-md-4 c-criteria-grade__col\">\n              <div className=\"c-criteria-grade__wrap\">\n                <PercentBox\n                  boxValue={overallPercentage}\n                  isDecimal={isDecimal}\n                />\n                <div className=\"c-criteria__info\">\n                  <span className=\"c-criteria-grade__overall\">\n                    {this.translate('rawScore')}\n                  </span>\n                  <span className=\"c-criteria-grade__average\">\n                    {`${this.translate('avg')}:${averagePercent}${\n                      isDecimal ? ' ' : ' %'\n                    }`}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-7 offset-md-1 c-criteria-grade__col\">\n              {descriptions.map((desc) => {\n                return (\n                  <>\n                    <p className=\"c-criteria-grade__desc\">{desc}</p>\n                    <br />\n                  </>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport { IPercentBoxProperties } from './percent-box-interface';\nimport './percent-box.scss';\n\nexport default class PercentBox extends BaseComponent<IPercentBoxProperties> {\n  public render(): ReactNode {\n    const { boxValue, isDecimal = false } = this.props;\n\n    return (\n      <div className=\"c-percent-box\">\n        <div className=\"c-percent-box__percent\">\n          {`${boxValue}${isDecimal ? \" \" : \"%\"}`}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { ReactNode } from 'react';\nimport BaseComponent from '../../base/base-component';\nimport { IShareContainerProperties } from './share-container-interface';\n\nexport default class ShareContainer extends BaseComponent<IShareContainerProperties> {\n  public render(): ReactNode {\n    const { children, shareName, ...restProperties } = this.props;\n\n    return (\n      <div data-id=\"share\" data-name={shareName} {...restProperties}>\n        {children}\n      </div>\n    );\n  }\n}\n","import { graphql, Link } from 'gatsby';\nimport React, { Fragment, ReactNode } from 'react';\nimport { generateUrlForStates } from '../../../../utils';\nimport BaseComponent from '../../../base/base-component';\nimport { ICycleScoreChartPoint } from '../../../components/charts/cycle-score/cycle-score-interface';\nimport ContainerBox from '../../../components/container-box/container-box';\nimport CriteriaGrade from '../../../components/criteria-grade/criteria-grade';\nimport ShareContainer from '../../../components/share-container/share-container';\nimport SocialMetadata from '../../../components/social-metadata/social-metadata';\nimport { SocialMetadataType } from '../../../components/social-metadata/social-metadata-enum';\nimport SvgIcon from '../../../components/svg-icon/svg-icon';\nimport { SvgIconPathCommand } from '../../../components/svg-icon/svg-icon-enum';\nimport {\n  SODComponents,\n  SODCycles,\n  SODGrade,\n  SODMeasures,\n} from '../../../global/global-enum';\nimport { ISODNode } from '../../../global/global-interfaces';\nimport { Route } from '../../../global/route-enum';\nimport { IEmbeddedRepresentationStateScore } from './representation-state-score-interface';\n\nexport default class EmbeddedRepresentationStateScore extends BaseComponent<IEmbeddedRepresentationStateScore> {\n  protected declareTranslateCollection(): string | undefined {\n    return 'stateRepresentationTemplate';\n  }\n\n  public render(): ReactNode {\n    const { representationTotal } = this.props.data;\n\n    const { value: averageValue } = this.populateAverageData(\n      SODComponents.TOTAL\n    );\n    const {\n      state,\n      value: overallValue,\n      grade,\n      score,\n    } = this.populateOverallData(SODComponents.TOTAL);\n    const totalCycleScores: ICycleScoreChartPoint[] =\n      representationTotal.nodes.map((node) => {\n        const { cycle, score, weight } = node;\n        return {\n          cycle,\n          score: Math.round(score * 100),\n          weight,\n        };\n      });\n\n    return (\n      <Fragment>\n        <SocialMetadata\n          type={SocialMetadataType.SUMMARY}\n          title={`${state} ${this.translate('scoreTitle')}`}\n          description={this.translate('firstScoreDescription')}\n          imageResourceFileName={`embedded-representation-score-${generateUrlForStates(\n            state\n          )}.png`}\n        />\n        <ContainerBox className=\"c-section--embed\">\n          <ShareContainer\n            className=\"c-embed__wrap\"\n            shareName={`representation-score-${generateUrlForStates(state)}`}\n          >\n            <div className=\"c-embed__box\">\n              <div className=\"c-embed__state\">{state}</div>\n              <CriteriaGrade\n                title={this.translate('scoreTitle')}\n                averageScore={Math.round(averageValue * 100)}\n                averagePercent={Math.round(averageValue * 100)}\n                overallPercentage={Math.round(overallValue * 100)}\n                cycleScores={totalCycleScores}\n                overallGrade={grade}\n                overallScore={Math.round(score * 100)}\n                descriptions={[\n                  this.translate('firstScoreDescription'),\n                  this.translate('secondScoreDescription'),\n                ]}\n              />\n            </div>\n            <div className=\"c-embed__logo\">\n              <Link to={Route.HOME}>\n                <SvgIcon\n                  width=\"111\"\n                  viewBox=\"0 0 208 44\"\n                  paths={[\n                    {\n                      command: SvgIconPathCommand.STATE_OF_DEMOCRACY,\n                      fill: '#0D0C0D',\n                    },\n                    {\n                      fillRule: 'evenodd',\n                      clipRule: 'evenodd',\n                      command: SvgIconPathCommand.LOGO_EAST,\n                      fill: '#C7AFF0',\n                    },\n                    {\n                      fillRule: 'evenodd',\n                      clipRule: 'evenodd',\n                      command: SvgIconPathCommand.LOGO_WEST,\n                      fill: '#4A1D96',\n                    },\n                  ]}\n                />\n              </Link>\n            </div>\n          </ShareContainer>\n        </ContainerBox>\n      </Fragment>\n    );\n  }\n\n  private populateOverallData(component: SODComponents): ISODNode {\n    const { overall } = this.props.data;\n    const componentOverall: ISODNode = overall.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n\n    return componentOverall;\n  }\n\n  private populateAverageData(component: SODComponents): ISODNode {\n    const { average } = this.props.data;\n    const componentAverage: ISODNode = average.nodes.find((node) => {\n      return node.component === component;\n    }) ?? {\n      code: 'NA',\n      component,\n      cycle: SODCycles.OVERALL,\n      grade: SODGrade.GRADE_NA,\n      measure: SODMeasures.PARTICIPATION,\n      score: -1,\n      state: 'NA',\n      value: -1,\n      weight: -1,\n    };\n    return componentAverage;\n  }\n}\n\nexport const query = graphql`\n  query EmbeddedStateRepresentation($state: String) {\n    representationTotal: allSheetDataRepresentation(\n      filter: {\n        state: { eq: $state }\n        component: { eq: \"Total\" }\n        cycle: { ne: \"Overall\" }\n      }\n    ) {\n      nodes {\n        code\n        cycle\n        grade\n        score\n        state\n        measure\n        component\n        value\n        weight\n      }\n    }\n\n    average: allSheetDataRepresentation(\n      filter: { state: { eq: \"US Average\" }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n\n    overall: allSheetDataRepresentation(\n      filter: { state: { eq: $state }, cycle: { eq: \"Overall\" } }\n    ) {\n      nodes {\n        code\n        state\n        grade\n        component\n        measure\n        cycle\n        score\n        value\n        weight\n      }\n    }\n  }\n`;\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["CriteriaGrade","declareTranslateCollection","render","this","props","descriptions","averageScore","averagePercent","cycleScores","overallGrade","overallPercentage","overallScore","title","isDecimal","simpleMode","rowClassName","join","chartScores","map","item","cycle","score","weight","className","grade","size","GradeSize","translate","chartPoints","boxValue","desc","BaseComponent","PercentBox","ShareContainer","children","shareName","restProperties","EmbeddedRepresentationStateScore","representationTotal","data","averageValue","populateAverageData","SODComponents","value","populateOverallData","state","overallValue","totalCycleScores","nodes","node","Math","round","Fragment","type","SocialMetadataType","description","imageResourceFileName","generateUrlForStates","Link","to","Route","width","viewBox","paths","command","SvgIconPathCommand","fill","fillRule","clipRule","component","overall","find","code","SODCycles","SODGrade","measure","SODMeasures","average","_assertThisInitialized","self","ReferenceError","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}